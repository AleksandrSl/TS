#!/usr/bin/env python
# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved

import sys
import os
import subprocess
import json
import time
import traceback
from optparse import OptionParser
from django.conf import settings
from django.template.loader import render_to_string

# critical environment variables:
DIRNAME                     = '' # home directory for the plugin files
TSP_URLPATH_PLUGIN_DIR      = ''
startplugin_json            = {}

# File names generated by the plugin
BASENAME_VARIANTS_XLS       = 'variants.xls'
BASENAME_ALLELES_XLS        = 'alleles.xls'
BASENAME_HOTSPOTS_XLS       = 'allele_counts.xls'
BASENAME_VARIANTS_VCF       = 'TSVC_variants.vcf'
BASENAME_PARAMETERS_JSON    = 'local_parameters.json'
HTML_BLOCK                  = 'variantCaller_block.html'    # Top report page block
HTML_RESULTS                = 'variantCaller.html'          # Main plugin page


# DEVELOPMENT/DEBUG options:
# NOTE: the following should all be set to 0 in production mode
PLUGIN_DEV_KEEP_INTERMEDIATE_FILES = True   # use prior to PLUGIN_DEV_RECALL_VARIANTS=1 to re-process from temporary results
PLUGIN_DEV_SKIP_VARIANT_CALLING = False      # 1 to skip variant calling - use previous calls
SKIP_BAMFILE_VERSION_CHECK = False

# Minimum barcode BAM size required for variant calling. 50,000 bytes ~ 100-400 reads.
BCFILE_MIN_SIZE = 50000



def printtime(message, *args):
    if args:
        message = message % args
    print "[ " + time.strftime('%X') + " ] " + message
    sys.stdout.flush()
    sys.stderr.flush()


def run_command(command,description):
    printtime(' ')
    printtime('Task    : ' + description)
    printtime('Command : ' + command)
    printtime(' ')
    return subprocess.call(command,shell=True)

def execute_output(cmd):
    try:
        process = subprocess.Popen(cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, shell=True)
        return process.communicate()[0]
    except:
        traceback.print_exc()
        return ''

#check for BAM file compatibility
def is_bam_invalid(bam_filename):
    if SKIP_BAMFILE_VERSION_CHECK:
        return False
    #check for BAM file compatibility
    validate_command  = 'java -Xmx500m -cp %s/TVC/jar/GenomeAnalysisTK.jar' % DIRNAME
    validate_command += ' org.iontorrent.vc.locusWalkerAttributes.validateBamFile'
    validate_command += ' "%s"' % bam_filename
    RTBAM = run_command(validate_command, 'Verify BAM file compatibility')
    return RTBAM != 0


def generate_incomplete_report_page(output_html_filename, message, vc_options, autorefresh=False):

    render_context = { 'run_name' : vc_options['run_name'], 'message' : message, 'autorefresh' : autorefresh,
                       'startplugin_json' : startplugin_json}

    out = open(output_html_filename,'w')
    out.write(render_to_string('report_incomplete.html', render_context))
    out.close()
    
    


def generate_barcode_links_block(block_html_path, barcode_data, vc_options):

    render_context = {
        'barcode_data'          : barcode_data,
        'options'               : vc_options,
        'startplugin_json'      : startplugin_json
    }

    out = open(block_html_path,'w')
    out.write(render_to_string('block_barcodes.html', render_context))
    out.close()



def generate_barcode_links_page (results_html_path, barcode_data, vc_options):

    render_context = {
        'barcode_data'     : barcode_data,
        'options'          : vc_options,
        'autorefresh'      : False,
        'startplugin_json' : startplugin_json
    }

    for barcode_entry in barcode_data:
        if barcode_entry['status'] == 'in_progress':
            render_context['autorefresh'] = True
    
    out = open(results_html_path,'w')
    out.write(render_to_string('report_barcodes.html', render_context))
    out.close()



def call_variants(results_directory,input_bam,vc_options,barcode=None):

    basename_input_bam   = os.path.basename(input_bam)
    untrimmed_bam = os.path.join(results_directory,basename_input_bam)                      # Local symlink to untrimmed BAM
    trimmed_bam = os.path.join(results_directory,basename_input_bam[:-4] + '_PTRIM.bam')
    
    subprocess.call('ln -s %s %s' % (input_bam, untrimmed_bam),shell=True)
    subprocess.call('ln -s %s.bai %s.bai' % (input_bam, untrimmed_bam),shell=True)

    assert not (vc_options['trim_reads'] and not vc_options['has_targets']), "Read trimming enabled but targets BED not provided"
    
    barcode_modifier = ''
    basename_variants_vcf = BASENAME_VARIANTS_VCF
    basename_variants_xls = BASENAME_VARIANTS_XLS
    basename_hotspots_xls = BASENAME_HOTSPOTS_XLS
    basename_alleles_xls  = BASENAME_ALLELES_XLS
    if barcode:
        barcode_modifier = '../'
        basename_variants_vcf = 'TSVC_variants_%s.vcf' % barcode
        basename_variants_xls = 'variants_%s.xls' % barcode
        basename_hotspots_xls = 'allele_counts_%s.xls' % barcode
        basename_alleles_xls  = 'alleles_%s.xls' % barcode
        
    
    # Execute main variant caller script
    variantcaller_command        = '%s/variant_caller_pipeline.py' % DIRNAME
    variantcaller_command   +=     '  --input-bam "%s"' % untrimmed_bam
    if vc_options['trim_reads']:
        variantcaller_command   += '  --primer-trim-bam "%s"' % trimmed_bam
        variantcaller_command   += '  --primer-trim-bed "%s"' % vc_options['targets_bed_unmerged']
    variantcaller_command       += '  --reference-fasta "%s"' % vc_options['genome_fasta']
    variantcaller_command       += '  --output-dir "%s"' % results_directory
    variantcaller_command       += '  --parameters-file "%s"' % os.path.join(results_directory,barcode_modifier+BASENAME_PARAMETERS_JSON)
    variantcaller_command       += '  --bin-dir "%s"' % DIRNAME
    if vc_options['has_targets']:
        variantcaller_command   += '  --region-bed "%s"' % vc_options['targets_bed_merged']
    if vc_options['has_hotspots']:
        variantcaller_command   += '  --hotspot-vcf "%s"' % vc_options['hotspots_vcf_gz']
    
    if PLUGIN_DEV_SKIP_VARIANT_CALLING:
        printtime('Skipping calling variants on mapped reads...')
    else:
        run_command(variantcaller_command,'Execute variant caller script')
    

    # Generate allele counts if hotspots loci BED provided
    if vc_options['has_hotspots']:
        allelecount_command = 'samtools mpileup -BQ0 -d1000000'
        allelecount_command += ' -f "%s"' % vc_options['genome_fasta']
        allelecount_command += ' -l ' + vc_options['hotspots_bed_merged']
        if vc_options['trim_reads']:
            allelecount_command += ' ' + trimmed_bam
        else:
            allelecount_command += ' ' + untrimmed_bam
        allelecount_command += ' | %s/scripts/allele_count_mpileup_stdin.py' % DIRNAME
        allelecount_command += ' > ' + os.path.join(results_directory,'allele_counts.txt')
        if PLUGIN_DEV_SKIP_VARIANT_CALLING:
            printtime('Skipping base pileup for hotspot alleles...')
        else:
            run_command(allelecount_command,'Base pileup for hotspot alleles')
        
        allelecount2_command = '%s/scripts/print_allele_counts.py' % DIRNAME
        allelecount2_command += ' ' + os.path.join(results_directory,'allele_counts.txt')
        allelecount2_command += ' ' + os.path.join(results_directory,BASENAME_HOTSPOTS_XLS)
        allelecount2_command += ' "%s"' % vc_options['hotspots_bed_unmerged_leftalign']
        allelecount2_command += ' "%s"' % vc_options['hotspots_bed_unmerged']
        run_command(allelecount2_command,'Generate hotspots allele coverage')



    # Generate xls tables and statistics from final vcf
    table_command        = '%s/scripts/generate_variant_tables.py' % DIRNAME
    table_command       += '  --input-vcf %s'       % os.path.join(results_directory,BASENAME_VARIANTS_VCF)
    if vc_options['has_targets']:
        table_command   += '  --region-bed %s'      % vc_options['targets_bed_unmerged']
    if vc_options['has_hotspots']:
        table_command   += '  --hotspots'
    table_command       += '  --output-xls %s'      % os.path.join(results_directory,BASENAME_VARIANTS_XLS)
    table_command       += '  --alleles2-xls %s'     % os.path.join(results_directory,BASENAME_ALLELES_XLS)
    table_command       += '  --summary-json %s'    % os.path.join(results_directory,'variant_summary.json')
    table_command       += '  --scatter-png %s'  % os.path.join(results_directory,'scatter.png')
    run_command(table_command,'Generate xls tables and statistics from final vcf')


    # Create symlinks to js/css folders and php scripts
    subprocess.call('ln -sf "%s/slickgrid" "%s"' % (DIRNAME,results_directory),shell=True)
    subprocess.call('cp -rf %s/copytoreport/* "%s"' % (DIRNAME,results_directory),shell=True)
    subprocess.call('ln -sf %s/scripts/*.php3 "%s"' % (DIRNAME,results_directory),shell=True)

    if barcode:
        subprocess.call('ln -s %s.gz %s.gz' % (os.path.join(results_directory,BASENAME_VARIANTS_VCF),
                                               os.path.join(results_directory,basename_variants_vcf)),shell=True)
        subprocess.call('ln -s %s.gz.tbi %s.gz.tbi' % (os.path.join(results_directory,BASENAME_VARIANTS_VCF),
                                                       os.path.join(results_directory,basename_variants_vcf)),shell=True)
        subprocess.call('ln -s %s %s' % (os.path.join(results_directory,BASENAME_VARIANTS_XLS),
                                         os.path.join(results_directory,basename_variants_xls)),shell=True)
        subprocess.call('ln -s %s %s' % (os.path.join(results_directory,BASENAME_ALLELES_XLS),
                                         os.path.join(results_directory,basename_alleles_xls)),shell=True)
        if vc_options['has_hotspots']:
            subprocess.call('ln -s %s %s' % (os.path.join(results_directory,BASENAME_HOTSPOTS_XLS),
                                             os.path.join(results_directory,basename_hotspots_xls)),shell=True)

    subprocess.call('touch %s/%s.done' % (results_directory,basename_variants_vcf),shell=True)

    render_context = {
        'options'               : vc_options,
        'configuration_link'    : BASENAME_PARAMETERS_JSON,
        'mapped_bam_link'       : os.path.basename(untrimmed_bam),
        'mapped_bai_link'       : os.path.basename(untrimmed_bam)+'.bai',
        'variants_vcf_gz_link'  : basename_variants_vcf+'.gz',
        'variants_tbi_link'     : basename_variants_vcf+'.gz.tbi',
        'variants_xls_link'     : basename_variants_xls,
        'alleles_xls_link'      : basename_alleles_xls,
        'hotspots_xls_link'     : basename_hotspots_xls,
        'trimmed_bam_link'      : os.path.basename(trimmed_bam),
        'trimmed_bai_link'      : os.path.basename(trimmed_bam)+'.bai',
        'results_url'           : TSP_URLPATH_PLUGIN_DIR,
        'startplugin_json'      : startplugin_json
    }
    
    if barcode:
        render_context['results_url'] += '/' + barcode

    summary_in = open(os.path.join(results_directory,'variant_summary.json'))
    render_context['summary'] = json.load(summary_in)
    summary_in.close()

    summary_in = open(os.path.join(results_directory,'variant_summary.json'))
    render_context['summary'] = json.load(summary_in)
    summary_in.close()
    
    if vc_options['has_targets']:
        render_context['targets_bed_link'] = os.path.basename(vc_options['targets_bed_unmerged'])
        
    if vc_options['has_hotspots']:
        render_context['hotspots_bed_link'] = os.path.basename(vc_options['hotspots_bed_unmerged_local'])
    
    if barcode:
        render_context['barcode'] = barcode

    out = open(results_directory + '/' + HTML_RESULTS,'w')
    out.write(render_to_string('report_details.html', render_context))
    out.close()

    out = open(results_directory + '/' + HTML_BLOCK,'w')
    out.write(render_to_string('block_details.html', render_context))
    out.close()

    out = open(results_directory + '/deprecated.htm','w')
    out.write(render_to_string('report_deprecated.html', render_context))
    out.close()


    # Create xml template required for adding IGV links
    fxml = open(os.path.join(results_directory,'igv_session.xml'), "w")    
    fxml.write('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n')
    fxml.write('<Global genome="%s" version="3">\n' % vc_options['genome_name'])
    fxml.write('    <Resources>\n')
    fxml.write('        <Resource name="%s.gz" path="{plugin_url}/%s.gz"/>\n' % (basename_variants_vcf,basename_variants_vcf))
    fxml.write('        <Resource name="%s" path="{plugin_url}/%s"/>\n' % (os.path.basename(untrimmed_bam),os.path.basename(untrimmed_bam)))
    if vc_options['has_targets']:
        fxml.write('        <Resource name="%s" path="{plugin_url}/%s"/>\n' % (render_context['targets_bed_link'],barcode_modifier+render_context['targets_bed_link']))
    if vc_options['has_hotspots']:
        fxml.write('        <Resource name="%s" path="{plugin_url}/%s"/>\n' % (render_context['hotspots_bed_link'],barcode_modifier+render_context['hotspots_bed_link']))
    fxml.write('    </Resources>\n')
    fxml.write('    <Panel name="DataPanel" height="150">\n')
    fxml.write('        <Track displayMode="EXPANDED" id="{plugin_url}/%s.gz" name="Variant Calls" visible="true"/>\n' % basename_variants_vcf)
    if vc_options['has_targets']:
        fxml.write('        <Track displayMode="COLLAPSED" id="{plugin_url}/%s" name="%s" visible="true"/>\n' % (barcode_modifier+render_context['targets_bed_link'],vc_options['targets_name']))
    if vc_options['has_hotspots']:
        fxml.write('        <Track displayMode="COLLAPSED" id="{plugin_url}/%s" name="%s" visible="true"/>\n' % (barcode_modifier+render_context['hotspots_bed_link'],vc_options['hotspots_name']))
    fxml.write('    </Panel>\n')
    fxml.write('    <Panel height="525">\n')
    fxml.write('        <Track displayMode="COLLAPSED" id="{plugin_url}/%s_coverage" name="Coverage" visible="true"/>\n' % os.path.basename(untrimmed_bam))
    fxml.write('        <Track displayMode="EXPANDED" id="{plugin_url}/%s" name="Alignments" visible="true"/>\n' % os.path.basename(untrimmed_bam))
    fxml.write('    </Panel>\n')
    fxml.write('    <Panel name="FeaturePanel" height="75">\n')
    fxml.write('        <Track displayMode="COLLAPSED" id="Reference sequence" name="Reference sequence" visible="true"/>\n')
    fxml.write('    </Panel>\n')
    fxml.write('    <PanelLayout dividerFractions="0.20,0.75"/>\n')
    fxml.write('</Global>\n')
    fxml.close()


    return render_context['summary']



def options_for_manual_start(startplugin_json):
    ''' Attempt to get plugin options assuming manual start. Returns None if not manual start. '''

    options = {}
    try:
        local_library_type              = startplugin_json['pluginconfig']['meta']['librarytype']
        local_configuration             = startplugin_json['pluginconfig']['meta']['configuration']
        local_trim_reads                = startplugin_json['pluginconfig']['meta']['trimreads']
        local_targets_name              = startplugin_json['pluginconfig']['meta']['targetregions_id']
        local_targets_bed_unmerged      = startplugin_json['pluginconfig']['meta']['targetregions']
        local_targets_bed_merged        = startplugin_json['pluginconfig']['meta']['targetregions_merge']
        local_hotspots_name             = startplugin_json['pluginconfig']['meta']['targetloci_id']
        local_hotspots_bed_unmerged     = startplugin_json['pluginconfig']['meta']['targetloci']
        local_hotspots_bed_merged       = startplugin_json['pluginconfig']['meta']['targetloci_merge']
        
        reload_parameters_file = '%s/pluginMedia/configs/%s.json' % (DIRNAME, local_configuration)
        if os.path.exists(reload_parameters_file):
            f = open(reload_parameters_file,'r')
            local_parameters = json.load(f)
            f.close()
            options['parameters_source'] = reload_parameters_file
        else:
            local_parameters      = {
                'freebayes'                 : startplugin_json['pluginconfig']['freebayes'],
                'long_indel_assembler'      : startplugin_json['pluginconfig']['long_indel_assembler'],
                'torrent_variant_caller'    : startplugin_json['pluginconfig']['torrent_variant_caller'],
            }
        if 'meta' not in local_parameters:
            local_parameters['meta'] = {}
        local_parameters['meta']['tvcargs'] = startplugin_json['pluginconfig']['meta']['tvcargs']
        
    except:
        return None

    if not local_parameters['meta']['tvcargs']:
        local_parameters['meta']['tvcargs'] = 'tvc'

    options['start_mode'] = 'Manual start'
    options['trim_reads'] = local_trim_reads
    options['parameters'] = local_parameters
    
    if  local_library_type      == "wholegenome":
        options['library_type'] = "Whole Genome"
        options['trim_reads'] = False
    elif local_library_type     == "ampliseq":
        options['library_type'] = "AmpliSeq"
    elif local_library_type     == "targetseq":
        options['library_type'] = "TargetSeq"
        options['trim_reads'] = False
    else:
        return None

    if local_configuration == "germline_low_stringency":
        options['configuration'] = "Germ Line - PGM - Low Stringency"
    elif local_configuration == "germline_high_stringency":
        options['configuration'] = "Germ Line - PGM - High Stringency"
    elif local_configuration == "somatic_low_stringency":
        options['configuration'] = "Somatic - PGM - Low Stringency"
    elif local_configuration == "somatic_high_stringency":
        options['configuration'] = "Somatic - PGM - High Stringency"
    elif local_configuration == "germline_low_stringency_proton":
        options['configuration'] = "Germ Line - Proton - Low Stringency"
    elif local_configuration == "germline_high_stringency_proton":
        options['configuration'] = "Germ Line - Proton - High Stringency"
    elif local_configuration == "germline_low_stringency_targetseq":
        options['configuration'] = "Germ Line - Proton TargetSeq - Low Stringency"
    elif local_configuration == "germline_high_stringency_targetseq":
        options['configuration'] = "Germ Line - Proton TargetSeq - High Stringency"
    elif local_configuration == "somatic_low_stringency_proton":
        options['configuration'] = "Somatic - Proton - Low Stringency"
    elif local_configuration == "somatic_high_stringency_proton":
        options['configuration'] = "Somatic - Proton - High Stringency"
    elif local_configuration == "AmpliSeq_Exome_Proton_3.6.2":
        options['configuration'] = "Ampliseq Exome 3.6.2 (Proton)"
    elif local_configuration == "ampliseq_dot_com":
        options['configuration'] = "AmpliSeq.com (tm) Panel-Optimized"
    elif local_configuration == "custom":
        options['configuration'] = "Custom"
    else:
        options['configuration'] = 'Unknown configuration (%s)' % local_configuration
    
    if local_targets_bed_unmerged:
        options['has_targets'] = True
        options['targets_bed_unmerged'] = local_targets_bed_unmerged
        options['targets_bed_merged'] = local_targets_bed_merged
        options['targets_name'] = local_targets_name
    else:
        options['has_targets'] = False
        options['trim_reads'] = False

    if local_hotspots_bed_unmerged:
        options['has_hotspots'] = True
        options['hotspots_bed_unmerged'] = local_hotspots_bed_unmerged
        options['hotspots_bed_merged'] = local_hotspots_bed_merged
        options['hotspots_name'] = local_hotspots_name
    else:
        options['has_hotspots'] = False

    return options



def options_for_plan_autostart(startplugin_json):
    ''' Attempt to get plugin options assuming plan-based autostart. Returns None if unsuccessful. '''

    options = {}

    local_library_type = startplugin_json.get('plan',{}).get('runType',None)
    if   local_library_type == 'AMPS' or local_library_type == 'AMPS_EXOME':
        options['library_type'] = "AmpliSeq"
        options['trim_reads'] = True
    elif local_library_type == 'TARS':
        options['library_type'] = "TargetSeq"
        options['trim_reads'] = False
    elif local_library_type == 'WGNM' or local_library_type == 'GENS':
        options['library_type'] = "Whole Genome"
        options['trim_reads'] = False
    elif local_library_type is None:
        return {'error':'Automatic analysis was not performed. Cannot determine run type from plan.'}
    else:
        return {'error':'Automatic analysis was not performed. Runtype "%s" is not supported.'%local_library_type}

    try:
        options['trim_reads'] = startplugin_json['runinfo']['plugin']['userInput']['meta']['trimreads']
    except:
        pass
        
    local_targets_bed_unmerged = startplugin_json.get('plan',{}).get('bedfile','')
    if not local_targets_bed_unmerged or local_targets_bed_unmerged == "none":
        options['has_targets'] = False
        options['trim_reads'] = False
    else:
        options['has_targets'] = True
        options['targets_bed_unmerged'] = local_targets_bed_unmerged
        options['targets_bed_merged'] = local_targets_bed_unmerged.replace('/unmerged/detail/','/merged/plain/')
        options['targets_name'] = os.path.basename(local_targets_bed_unmerged)[:-4]
        

    local_hotspots_bed_unmerged = startplugin_json.get('plan',{}).get('regionfile','')
    if not local_hotspots_bed_unmerged or local_hotspots_bed_unmerged == "none":
        options['has_hotspots'] = False
    else:
        options['has_hotspots'] = True
        options['hotspots_bed_unmerged'] = local_hotspots_bed_unmerged
        options['hotspots_bed_merged'] = local_hotspots_bed_unmerged.replace('/unmerged/detail/','/merged/plain/')
        options['hotspots_name'] = os.path.basename(local_hotspots_bed_unmerged)[:-4]
    

    try:
        local_configuration = startplugin_json['runinfo']['plugin']['userInput']['meta']['configuration']
        if local_configuration == "germline_low_stringency":
            options['configuration'] = "Germ Line - PGM - Low Stringency"
        elif local_configuration == "germline_high_stringency":
            options['configuration'] = "Germ Line - PGM - High Stringency"
        elif local_configuration == "somatic_low_stringency":
            options['configuration'] = "Somatic - PGM - Low Stringency"
        elif local_configuration == "somatic_high_stringency":
            options['configuration'] = "Somatic - PGM - High Stringency"
        elif local_configuration == "germline_low_stringency_proton":
            options['configuration'] = "Germ Line - Proton - Low Stringency"
        elif local_configuration == "germline_high_stringency_proton":
            options['configuration'] = "Germ Line - Proton - High Stringency"
        elif local_configuration == "germline_low_stringency_targetseq":
            options['configuration'] = "Germ Line - Proton TargetSeq - Low Stringency"
        elif local_configuration == "germline_high_stringency_targetseq":
            options['configuration'] = "Germ Line - Proton TargetSeq - High Stringency"
        elif local_configuration == "somatic_low_stringency_proton":
            options['configuration'] = "Somatic - Proton - Low Stringency"
        elif local_configuration == "somatic_high_stringency_proton":
            options['configuration'] = "Somatic - Proton - High Stringency"
        elif local_configuration == "AmpliSeq_Exome_Proton_3.6.2":
            options['configuration'] = "Ampliseq Exome 3.6.2 (Proton)"
        elif local_configuration == "ampliseq_dot_com":
            options['configuration'] = "AmpliSeq.com (tm) Panel-Optimized"
        elif local_configuration == "custom":
            options['configuration'] = "Custom"
        else:
            options['configuration'] = 'Unknown configuration (%s)' % local_configuration
        
        reload_parameters_file = '%s/pluginMedia/configs/%s.json' % (DIRNAME, local_configuration)
        if os.path.exists(reload_parameters_file):
            f = open(reload_parameters_file,'r')
            options['parameters'] = json.load(f)
            f.close()
            options['parameters_source'] = reload_parameters_file
        else:
            options['parameters'] = {
                'freebayes'                 : startplugin_json['runinfo']['plugin']['userInput']['freebayes'],
                'long_indel_assembler'      : startplugin_json['runinfo']['plugin']['userInput']['long_indel_assembler'],
                'torrent_variant_caller'    : startplugin_json['runinfo']['plugin']['userInput']['torrent_variant_caller'],
            }
        if 'meta' not in options['parameters']:
            options['parameters']['meta'] = {}
        options['parameters']['meta']['tvcargs'] = startplugin_json['runinfo']['plugin']['userInput'].get('meta',{}).get('tvcargs','tvc')
        
        if not options['parameters']['meta']['tvcargs']:
            options['parameters']['meta']['tvcargs'] = 'tvc'
        
        options['start_mode'] = 'Autostart with plan configuration'
    except:
        traceback.print_exc()
        options['configuration'] = "Germ Line - PGM"
        f = open(DIRNAME + '/pluginMedia/configs/germline_low_stringency.json','r')
        options['parameters'] = json.load(f)
        f.close()
        options['start_mode'] = 'Autostart with default configuration'
    
    return options

    

def plugin_main():
    
    global PLUGIN_DEV_SKIP_VARIANT_CALLING    
    global DIRNAME
    global TSP_URLPATH_PLUGIN_DIR
    global startplugin_json

    parser = OptionParser()
    parser.add_option('-d', '--install-dir', help='Directory containing plugin files', dest='install_dir')
    parser.add_option('-o', '--output-dir', help='Directory for results files', dest='output_dir')
    parser.add_option('-u', '--output-url', help='URL matching the output directory', dest='output_url')
    parser.add_option('-r', '--report-dir', help='Directory containing analysis report files', dest='report_dir')
    parser.add_option('-f', '--genome-fasta', help='Reference genome fasta file', dest='genome_fasta')
    parser.add_option('-s', '--skip-tvc', help='(debug) Skip variant calling and reuse existing results', dest='skip_tvc', action="store_true", default=False)
    (options, args) = parser.parse_args()


    DIRNAME                     = options.install_dir    #os.environ['DIRNAME']         # home directory for the plugin files
    TSP_FILEPATH_PLUGIN_DIR     = options.output_dir     #os.environ['TSP_FILEPATH_PLUGIN_DIR'] # target plugin results directory
    ANALYSIS_DIR                = options.report_dir     #os.environ['ANALYSIS_DIR'] # main report directory
    TSP_URLPATH_PLUGIN_DIR      = options.output_url
    PLUGIN_DEV_SKIP_VARIANT_CALLING = options.skip_tvc

    settings.configure(DEBUG=True, TEMPLATE_DEBUG=True, TEMPLATE_DIRS=((DIRNAME+'/templates'),))

    subprocess.call('rm -f %s/results.json' % TSP_FILEPATH_PLUGIN_DIR,shell=True)            

    printtime('')
    printtime('Variant Caller Plugin started')
    printtime('')

    try:
        json_file = open(os.path.join(TSP_FILEPATH_PLUGIN_DIR,'startplugin.json'), 'r')
        startplugin_json = json.load(json_file)
        json_file.close()
    except:
        printtime('ERROR: Failed to load and parse startplugin.json')
        return 1


    # Uncomment to emulate autorun:
    #startplugin_json['pluginconfig'] = {}
        
    vc_options = options_for_manual_start(startplugin_json)
    if not vc_options:
        vc_options = options_for_plan_autostart(startplugin_json)


    vc_options['run_name']      = startplugin_json['expmeta'].get('run_name','Current run')
    vc_options['genome_name']   = startplugin_json['runinfo'].get('library','')
    vc_options['plugin_name']   = startplugin_json['runinfo'].get('plugin_name','')
    vc_options['genome_fasta']  = options.genome_fasta   #os.environ['TSP_FILEPATH_GENOME_FASTA']
        
    if 'error' in vc_options:
        printtime(vc_options['error'])
        generate_incomplete_report_page(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS),vc_options['error'], vc_options)
        return 1



    f = open(os.path.join(TSP_FILEPATH_PLUGIN_DIR,BASENAME_PARAMETERS_JSON),'w')
    json.dump(vc_options['parameters'],f,indent=4)
    f.close()


    TSP_FILEPATH_BARCODE_TXT    = ANALYSIS_DIR + '/barcodeList.txt'
    vc_options['has_barcodes'] = False
    if os.path.exists(TSP_FILEPATH_BARCODE_TXT):
        vc_options['has_barcodes'] = True

    # Call tvc -v to get the version string
    tvc_args = vc_options['parameters'].get('meta',{}).get('tvcargs','tvc')
    if tvc_args == 'tvc' and os.path.exists(DIRNAME + '/tvc'):   # try local binary first, then go to global one
        tvc_args = DIRNAME + '/tvc'
    vc_options['tvc_version'] = execute_output(tvc_args + ' -v').splitlines()[0]
    if vc_options['tvc_version'].endswith('- Torrent Variant Caller'):
        vc_options['tvc_version'] = vc_options['tvc_version'][:-24].strip()
    
    
    # Parameters from plugin customization
    printtime('Variant Caller plugin run options:')
    printtime('  Plugin name            : ' + vc_options['plugin_name'])
    printtime('  Plugin start mode      : ' + vc_options['start_mode'])
    printtime('  Variant Caller version : ' + vc_options['tvc_version'])
    printtime('  Run is barcoded        : ' + str(vc_options['has_barcodes']))
    printtime('  Genome                 : ' + vc_options['genome_name'])
    printtime('  Library Type           : ' + vc_options['library_type'])
    printtime('  Parameter Settings     : ' + vc_options['configuration'])
    printtime('  Target Regions         : ' + (vc_options['targets_name'] if vc_options['has_targets'] else 'Not using'))
    printtime('  Hotspots               : ' + (vc_options['hotspots_name'] if vc_options['has_hotspots'] else 'Not using'))
    printtime('  Trim Reads             : ' + str(vc_options['trim_reads']))
    
    printtime('')
    printtime('Used files:')
    printtime('  Reference Genome       : ' + vc_options['genome_fasta'])
    printtime('  Parameters file        : ' + os.path.join(TSP_FILEPATH_PLUGIN_DIR,BASENAME_PARAMETERS_JSON))
    if 'parameters_source' in vc_options:
        printtime('  Parameters source file : ' + vc_options['parameters_source'])
    
    if vc_options['has_targets']:
        printtime('  Target unmerged BED    : ' + vc_options['targets_bed_unmerged'])
        printtime('  Target merged BED      : ' + vc_options['targets_bed_merged'])
    if vc_options['has_hotspots']:
        printtime('  Hotspots unmerged BED  : ' + vc_options['hotspots_bed_unmerged'])
        printtime('  Hotspots merged BED    : ' + vc_options['hotspots_bed_merged'])
    printtime('')



    PLUGIN_HS_ALIGN_DIR = TSP_FILEPATH_PLUGIN_DIR + '/hs_align'
    
    # Remove previous results to avoid displaying old before ready
    subprocess.call('rm -f %s/%s' % (TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS),shell=True)
    subprocess.call('rm -f %s' % (TSP_FILEPATH_PLUGIN_DIR + '/results.json'),shell=True)
    subprocess.call('rm -f %s/*.bed' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -rf %s/*.bam*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -rf %s' % (PLUGIN_HS_ALIGN_DIR),shell=True)
    subprocess.call('rm -f %s/hotspot*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -f %s/variant*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -f %s/allele*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -f %s/*.xls' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -f %s/*.log' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -f %s/*.done' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('rm -rf %s/lifegrid' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
    
    if not PLUGIN_DEV_SKIP_VARIANT_CALLING:
        subprocess.call('rm -f %s/SNP*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
        subprocess.call('rm -f %s/indel*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)
        subprocess.call('rm -f %s/TSVC*' % (TSP_FILEPATH_PLUGIN_DIR),shell=True)


    printtime('Results folder initialized')
    
    # Get local copy of BED files (may be deleted from system later)
    if vc_options['has_targets']:
        if not os.path.exists( vc_options['targets_bed_unmerged']):
            printtime('ERROR: Cannot locate target regions file: ' +  vc_options['targets_bed_unmerged'])
            return 1
        if not os.path.exists(vc_options['targets_bed_merged']):
            printtime('ERROR: Cannot locate merged target regions file: ' + vc_options['targets_bed_merged'])
            return 1
        subprocess.call('cp -f %s %s/%s' % (vc_options['targets_bed_unmerged'],TSP_FILEPATH_PLUGIN_DIR,os.path.basename(vc_options['targets_bed_unmerged'])),shell=True)    
    
    if vc_options['has_hotspots']:
        if not os.path.exists(vc_options['hotspots_bed_unmerged']):
            printtime('ERROR: Cannot locate hotspots file: ' +  vc_options['hotspots_bed_unmerged'])
            return 1
        if not os.path.exists(vc_options['hotspots_bed_merged']):
            printtime('ERROR: Cannot locate merged hotspots file: ' + vc_options['hotspots_bed_merged'])
            return 1
        
        vc_options['hotspots_bed_unmerged_local'] = os.path.join(TSP_FILEPATH_PLUGIN_DIR,os.path.basename(vc_options['hotspots_bed_unmerged']))
        vc_options['hotspots_bed_unmerged_leftalign'] = vc_options['hotspots_bed_unmerged_local'][:-4] + '.left.bed'
        
        subprocess.call('cp -f %s %s' % (vc_options['hotspots_bed_unmerged'],vc_options['hotspots_bed_unmerged_local']),shell=True)

        prepare_hotspots_command  = 'tvcutils prepare_hotspots'
        prepare_hotspots_command += '  --input-bed %s' % vc_options['hotspots_bed_unmerged']
        prepare_hotspots_command += '  --reference %s' % vc_options['genome_fasta']
        prepare_hotspots_command += '  --left-alignment on' 
        prepare_hotspots_command += '  --output-bed %s' % vc_options['hotspots_bed_unmerged_leftalign']
        prepare_hotspots_command += '  --output-vcf %s/hotspot.vcf' % TSP_FILEPATH_PLUGIN_DIR
        run_command(prepare_hotspots_command, 'Generate filtered, left-aligned, and merged hotspot VCF file')
        
        hotspot_file_empty = True
        try:
            f = open('%s/hotspot.vcf' % TSP_FILEPATH_PLUGIN_DIR, 'r')
            for line in f:
                if not line or line.startswith('#'):
                    continue
                hotspot_file_empty = False
        except:
            pass
        
        if hotspot_file_empty:
            printtime('Filtered hotspot file has no hotspot entries. Disabling hotspots')
            vc_options['has_hotspots'] = False
        else:
            run_command('bgzip -c %s/hotspot.vcf > %s/hotspot.vcf.gz' % (TSP_FILEPATH_PLUGIN_DIR,TSP_FILEPATH_PLUGIN_DIR), 'Generate compressed hotspot vcf')
            run_command('tabix -p vcf %s/hotspot.vcf.gz' % (TSP_FILEPATH_PLUGIN_DIR), 'Generate index for compressed hotspot vcf')
            vc_options['hotspots_vcf_gz'] = TSP_FILEPATH_PLUGIN_DIR + '/hotspot.vcf.gz'

    
    # Make links to js/css used for barcodes table and empty results page
    subprocess.call('ln -sf "%s/js" "%s"' % (DIRNAME,TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('ln -sf "%s/css" "%s"' % (DIRNAME,TSP_FILEPATH_PLUGIN_DIR),shell=True)
    subprocess.call('ln -sf %s/scripts/*.php3 "%s"' % (DIRNAME,TSP_FILEPATH_PLUGIN_DIR),shell=True)


    results_json = {
        'Aligned Reads'     : vc_options['run_name'],
        'Library Type'      : vc_options['library_type'],
        'Configuration'     : vc_options['configuration'],
        'Target Regions'    : (vc_options['targets_name'] if vc_options['has_targets'] else 'Not using'),
        'Target Loci'       : (vc_options['hotspots_name'] if vc_options['has_hotspots'] else 'Not using'),
        'Trim Reads'        : vc_options['trim_reads'],
        'barcoded'          : 'false'
    }
    if vc_options['has_targets']:
        results_json['targets_bed'] = vc_options['targets_bed_unmerged']
    if vc_options['has_hotspots']:
        results_json['hotspots_bed'] = vc_options['hotspots_bed_unmerged']


    if vc_options['has_barcodes']:      # Run for barcodes or single page

        # Load barcode list    
        barcode_data = []    
        bc_list_file = open(TSP_FILEPATH_BARCODE_TXT,'r')
        for line in bc_list_file:
            if not line.startswith('barcode '):
                continue
    
            barcode_entry = {}
            barcode_entry['name'] = line.split(',')[1]
            barcode_entry['bam'] = os.path.join(ANALYSIS_DIR, barcode_entry['name'] + '_rawlib.bam')
            barcode_entry['status'] = 'queued'

            if not PLUGIN_DEV_SKIP_VARIANT_CALLING:
                subprocess.call('rm -rf %s/%s' % (TSP_FILEPATH_PLUGIN_DIR,barcode_entry['name']),shell=True)
            
            if not os.path.exists(barcode_entry['bam']):
                continue
            
            # Size enough to process? TODO - just get from datasets_basecaller.json
            if os.stat(barcode_entry['bam']).st_size < BCFILE_MIN_SIZE:
                barcode_entry['status'] = 'insufficient_reads'
                
            elif is_bam_invalid(barcode_entry['bam']):
                barcode_entry['status'] = 'invalid_bam'
                    
            barcode_data.append(barcode_entry)
        
        bc_list_file.close()
        # End load barcode list
        
        printtime('')
        printtime('Processing %d barcodes...' % len(barcode_data))
    
        # Start json file
        results_json['barcoded'] = 'true'
        results_json['barcodes'] = {}
        
        all_barcodes_successful = True
        
        for barcode_idx in range(len(barcode_data)):
            if barcode_data[barcode_idx]['status'] != 'queued':
                printtime('Skipping barcode ' + barcode_data[barcode_idx]['name'])
                continue
    
            barcode_data[barcode_idx]['status'] = 'in_progress'
            generate_barcode_links_page(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS), barcode_data, vc_options)
    
            BARCODE_DIR = TSP_FILEPATH_PLUGIN_DIR + '/' + barcode_data[barcode_idx]['name']
            if not os.path.exists(BARCODE_DIR):
                os.makedirs(BARCODE_DIR)
            
            # perform coverage anaysis and write content
            printtime('')
            printtime('Processing barcode ' + barcode_data[barcode_idx]['name'])
    
            try:
                summary = call_variants(BARCODE_DIR,barcode_data[barcode_idx]['bam'],vc_options,barcode_data[barcode_idx]['name'])
                
                results_json['barcodes'][barcode_data[barcode_idx]['name']] = {}
                results_json['barcodes'][barcode_data[barcode_idx]['name']]['variants'] = summary.get('variants_total',{})
                results_json['barcodes'][barcode_data[barcode_idx]['name']]['hotspots'] = summary.get('hotspots_total',{})
                
                barcode_data[barcode_idx]['summary'] = summary
                barcode_data[barcode_idx]['status'] = 'completed'
            
            except:
                traceback.print_exc()
                all_barcodes_successful = False
                barcode_data[barcode_idx]['status'] = 'error'
        
        #Zip all vcf.gz and vcf.gz.tbi files
        zip_vcf_command =   'zip  --junk-paths'
        zip_vcf_command +=  '  %s/%s.vcf.zip' % (TSP_FILEPATH_PLUGIN_DIR,vc_options['run_name'])
        zip_vcf_command +=  '  '
        zip_vcf_command +=  '  '.join(('%s/%s/TSVC_variants_%s.vcf.gz' % (TSP_FILEPATH_PLUGIN_DIR,barcode['name'],barcode['name'])) 
                                      for barcode in barcode_data if barcode['status'] == 'completed')
        zip_vcf_command +=  '  '
        zip_vcf_command +=  '  '.join(('%s/%s/TSVC_variants_%s.vcf.gz.tbi' % (TSP_FILEPATH_PLUGIN_DIR,barcode['name'],barcode['name'])) 
                                      for barcode in barcode_data if barcode['status'] == 'completed')
        run_command(zip_vcf_command, 'Store per-barcode vcf files in a single zip file')
        
        #Zip all variants_*.xls files.
        zip_xls_command =   'zip  --junk-paths'
        zip_xls_command +=  '  %s/%s.xls.zip' % (TSP_FILEPATH_PLUGIN_DIR,vc_options['run_name'])
        zip_xls_command +=  '  '
        zip_xls_command +=  '  '.join(('%s/%s/alleles_%s.xls' % (TSP_FILEPATH_PLUGIN_DIR,barcode['name'],barcode['name'])) 
                                      for barcode in barcode_data if barcode['status'] == 'completed')
        run_command(zip_xls_command, 'Store per-barcode xls files in a single zip file')
        
        
        generate_barcode_links_page(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS), barcode_data, vc_options)
        generate_barcode_links_block(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_BLOCK), barcode_data, vc_options)

        if not all_barcodes_successful:
            return 1
            

    
    else:   # Non-barcoded run

        generate_incomplete_report_page(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS), 'Variant calling still in progress', vc_options, autorefresh=True)

        fullpath_input_bam = os.path.join(ANALYSIS_DIR, 'rawlib.bam')

        if is_bam_invalid(fullpath_input_bam):
            generate_incomplete_report_page(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS), 'BAM file format validation failed. Regenerate BAM with latest TS.', vc_options)
            return 1

        try:
            summary = call_variants(TSP_FILEPATH_PLUGIN_DIR,fullpath_input_bam,vc_options)

            results_json['variants'] = summary.get('variants_total',{})
            results_json['hotspots'] = summary.get('hotspots_total',{})
            
        except:
            traceback.print_exc()
            generate_incomplete_report_page(os.path.join(TSP_FILEPATH_PLUGIN_DIR,HTML_RESULTS), 'An error occurred - check Log File for details', vc_options)
            return 1
        
    
    out = open(TSP_FILEPATH_PLUGIN_DIR + '/results.json','w')
    json.dump(results_json,out,indent=4)
    out.close()

    printtime('')
    printtime('Variant Caller Plugin complete')
    printtime('')
    
    return 0


if __name__ == "__main__":
    
    exit(plugin_main())


