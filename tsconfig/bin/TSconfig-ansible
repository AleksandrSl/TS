#!/bin/bash
# Copyright (C) 2011-2014 Ion Torrent Systems, Inc. All Rights Reserved
#
# Purpose: Configure an ubuntu (currently 10.04 lucid distribution) server for
# use as a Torrent Server.
#
set -e

#---                                    ---#
#--- Include function definition file	---#
#---                                    ---#
TSCONFIG_SRC_DIR='/usr/share/ion-tsconfig'
source $TSCONFIG_SRC_DIR/ts_params||source ../ts_params||true
source $TSCONFIG_SRC_DIR/ts_functions|| source ../ts_functions||true
LOCK_FILE=/var/lock/tsconfiglock

#--------------------------------------
# trap exit codes
#--------------------------------------
trap 'error ${LINENO}' ERR

#--------------------------------------
# Call this to indicate an unimplemented option
#--------------------------------------
function not_implemented()
{
    echo
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo
    echo "DRAT! This has not been implemented using Ansible yet!"
    echo "Contact bernard.puc@thermofisher.com."
    echo
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    exit
}
function in_progress()
{
    echo
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo
    echo "So close! This is partially implemented using Ansible!"
    echo "But there's still some troubles with the feature"
    echo
    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    exit
}


#---                            ---#
#---    Variable Declarations   ---#
#---                            ---#
EXECUTE=0
OPTARGS="$@"
CONF_HEAD_NODE=0        # Enables SGE qmaster,postgres,apache2,/results sharing
UPDATE_SOFTWARE=0       # Get software updates and install
UPDATE_HOSTNAME=0       # Change the hostname (requires reboot)
CONF_TIME_ZONE=0        # Run timezone configuration script
CONF_POSTFIX=0          # Run postfix configuration script
#ETH_DEV=$(outbound_net_port)    # outgoing network device
APT_USB=0               # flags use of USB key drive as apt repository
INITIAL_CONFIG=1        # Flags interactive configuration settings - only for initial configuration
CHANGE_PASSWORD=0       # Change ionadmin password.
PURGE_ALL_DEB=0         # Delete all deb package files in apt cache
RECONFIGURE=0           # Re-run configuration steps only
version=`echo '$Revision: 86238 $'|awk '{print $2}'`


#-------------------------------------------------------------------------------
# Check for valid distribution
# Only Ubuntu 14.04 allowed at this time
#-------------------------------------------------------------------------------
if test $EXECUTE; then
    if [ $(lsb_release -r -s) == '14.04' ]; then
        #echo "Valid OS"
        :
    else
        echo "This release not supported.  Try TSconfig"
        exit 0
    fi
fi


#---                                    ---#
#---    Command Line Options Parsing    ---#
#---                                    ---#

#---    First, if no args given, print help ---#
if [ $# == 0 ]; then
    print_help
    exit 0
fi

#---    We convert all arguments to lower case  ---#
while [ $# != 0 ]; do
    case ${1,,} in
        '-g')
            EXECUTE=1
        ;;
        '-d'|'--debug')
            set -x
        ;;
        '--configure-server')
            if [ $EXECUTE == 1 ];then user_msg "Configure server as Head Node"; fi
            CONF_HEAD_NODE=1
        ;;
        '--update-torrent-suite'|'-s')
            if [ $EXECUTE == 1 ];then user_msg "Check for and install Ion Software updates"; fi
            UPDATE_SOFTWARE=1
        ;;
        '--reconfigure')
            RECONFIGURE=1
        ;;
        '--skip-init')   # do not execute interactive, initialization steps
            INITIAL_CONFIG=0
            not_implemented
        ;;
        '--change-hostname'|'-r')
            if [ $EXECUTE == 1 ];then user_msg "Change server hostname"; fi
            UPDATE_HOSTNAME=1
        ;;
        '--configure-timezone'|'-z')
            if [ $EXECUTE == 1 ];then user_msg "Configure time zone settings"; fi
            CONF_TIME_ZONE=1
        ;;
        '--configure-postfix'|'-p')
            if [ $EXECUTE == 1 ];then user_msg "Configure postfix mail settings"; fi
            CONF_POSTFIX=1
        ;;
        '--eth-dev'|'-e')
            shift
            ETH_DEV=$1
            if [ $EXECUTE == 1 ];then user_msg "Ethernet device specified: $ETH_DEV"; fi
            not_implemented
        ;;
        '--apt-usb')
            if [ $EXECUTE == 1 ];then user_msg "Use Ion Install USB Drive as apt repository"; fi
            APT_USB=1
            not_implemented
        ;;
        '--purge-all-deb')
            PURGE_ALL_DEB=1
        ;;
        '--help'|'-h'|\?)
            print_help
            exit 0
        ;;
        '--version'|'-v')
            user_msg "`basename $0` version $version"
            if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
                source /opt/ion/bin/ion-tsconfig.version.env
                IonVersionGetFullVersion ion-tsconfig
            fi
			exit 0
        ;;
        *)
        echo "Unknown option: $1.  Exiting"
        echo "Use TSconfig-ansible --help for options."
        exit 1
        ;;
    esac
    shift
done

#---                                                                        ---#
#---    Exit and call script again this time logging all stdout and stderr  ---#
#---                                                                        ---#
if [ $EXECUTE -eq 0 ]; then
    rotate_log
    exec 3>&2   # fd 3 opened and directed to stderr; 'stores' original stderr fd
    exec 2>$TSCONFIG_LOG_DIR/$TSCONFIG_DEBUG_LOG    # Redirect stderr to a file
    echo $(date) > $TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG
	$0 -g $OPTARGS | tee -a $TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG
    exit ${PIPESTATUS[0]}
fi

#---                    ---#
#---    Main Execution  ---#
#---                    ---#
#-----------------------------------------
# Need to acquire the lock file to proceed
#-----------------------------------------
if mkdir $LOCK_FILE; then
  trap 'rm -rf "$LOCK_FILE"' 0
  PID_LOCKED=1
  echo "Locking succeeded" 1>&2
else
  echo "Lock failed - is previous instance of TSconfig running?"
  exit 1
fi

if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
    source /opt/ion/bin/ion-tsconfig.version.env
fi
log "version "`IonVersionGetMajor`"."`IonVersionGetMinor`"."`IonVersionGetRelease`" ("`IonVersionGetGitHash`")"


#---
#---    N.B. When a server configuration is specified, all other options are ignored
#---
if [ $CONF_HEAD_NODE == 1 ]; then

    #if ! network_tests $ETH_DEV; then
    #    log "Cannot configure node: Failed network test"
    #    exit 1
    #fi
    # Root partition space check
    echo "=================================================================="
    echo "Checking available disk space on the root partition"
    echo "=================================================================="
    free_root=$(df -Pk |grep `mount|grep "on / type"|awk '{print $1}'`|awk '{print $4}')
    log "root partition free space:$free_root kb"
    free_threshold=10485760
    if [[ $free_root -lt $free_threshold ]]; then

        log "Not enough disk space to install software (/ has $free_root kb free)"
        user_msg "=================================================================="
        user_msg "Not enough disk space to install software"
        user_msg "/ partition has $free_root kb free and needs $free_threshold kb"
        user_msg "Ion Software install has been cancelled."
        user_msg "=================================================================="
        exit 0
    fi

    # Use local hosts file, if it exists, else default
    ANSIBLE_HOME=/usr/share/ion-tsconfig/ansible
    MY_HOSTS=torrentsuite_hosts
    if [ -r $ANSIBLE_HOME/torrentsuite_hosts_local ]; then
        MY_HOSTS=torrentsuite_hosts_local
    fi

    #============================================================================================
    # Compute Node Handling
    #============================================================================================
    fubar=$(awk '/\[computes\]/,/\[webserver:children\]/' ${ANSIBLE_HOME}/${MY_HOSTS} | grep -v '\[')
    if [ ! -z "$fubar" ]; then
        configure_computes=true
    else
        configure_computes=false
    fi

    if $configure_computes; then
        
        echo "=================================================================="
        echo "Preparing compute nodes for configuration"
        echo "=================================================================="
        # Make sure we have an ssh key to give to the compute nodes - Run as ionadmin user, not root
        sudo -u $TSCONFIG_CLUSTER_ADMIN mkdir --mode=0700 -p /home/$TSCONFIG_CLUSTER_ADMIN/.ssh
        ANSIBLE_RSA_KEY=/home/$TSCONFIG_CLUSTER_ADMIN/.ssh/ansible_rsa_key
        if [[ ! -e ${ANSIBLE_RSA_KEY} ]]; then
            log "Generate ssh key"
            sudo -u $TSCONFIG_CLUSTER_ADMIN ssh-keygen -q -f ${ANSIBLE_RSA_KEY} -t rsa -N ''
        fi
        # This prompts for a password every time.
        echo -e "\nEnter compute node password..."
        sudo -u $TSCONFIG_CLUSTER_ADMIN ansible all -i ${ANSIBLE_HOME}/${MY_HOSTS} -m authorized_key -a "user=$TSCONFIG_CLUSTER_ADMIN key='{{ lookup('file', '${ANSIBLE_RSA_KEY}.pub') }}' path=/home/$TSCONFIG_CLUSTER_ADMIN/.ssh/authorized_keys manage_dir=no" --ask-pass -c paramiko -vvvv 1>&2 || true
        
    fi

    export ANSIBLE_HOST_KEY_CHECKING=False
    # Rotate the ansible log file (Also specified in /etc/ansible/ansible.cfg)
    rotate /var/log/ion/ansible.log

    log "Configure Head Node"
    echo "=================================================================="
    echo "Starting the site configuration with ansible"
    echo "=================================================================="
    cd $ANSIBLE_HOME
    ansible-playbook site.yml \
        -i ${ANSIBLE_HOME}/${MY_HOSTS} \
        --sudo


    #Call initial configuration steps which require user input
#    if [ $INITIAL_CONFIG == 1 ]; then
#        exec 2>&3   # Redirect stderr (which points to a file) back to stderr (console)
#        config_password
#        dpkg-reconfigure tzdata
#    fi

    echo "=================================================================="
    echo "TSconfig configure process completed successfully"
    echo "=================================================================="

    exit 0
fi

#---
#---    N.B. When a software update is specified, all other options are ignored
#---
if [ $UPDATE_SOFTWARE == 1 ]; then

    log "Torrent Suite update"
    # Root partition space check
    free_root=$(df -Pk |grep `mount|grep "on / type"|awk '{print $1}'`|awk '{print $4}')
    log "root partition free space:$free_root kb"
    free_threshold=1048576
    if [[ $free_root -lt $free_threshold ]]; then

        log "Not enough disk space to update software (/ has $free_root kb free)"
        user_msg "=================================================================="
        user_msg "Not enough disk space to update software"
        user_msg "/ partition has $free_root kb free and needs $free_threshold kb"
        user_msg "Ion Software update has been cancelled."
        user_msg "=================================================================="

    else

        # Use local hosts file, if it exists, else default
        ANSIBLE_HOME=/usr/share/ion-tsconfig/ansible
        MY_HOSTS=torrentsuite_hosts
        if [ -r $ANSIBLE_HOME/torrentsuite_hosts_local ]; then
            MY_HOSTS=torrentsuite_hosts_local
        fi

        log "Update software"
        cd $ANSIBLE_HOME
        ansible-playbook software_update.yml \
            -i ${ANSIBLE_HOME}/${MY_HOSTS} \
            --sudo

        if [ $? == 0 ]; then
            echo "=================================================================="
            echo "Software Update Complete"
            echo "=================================================================="
        else
            echo "=================================================================="
            echo "There was an error.  Sorry.  Check the log files."
            echo "=================================================================="
        fi

    fi

    exit
fi

#---
#---    Run the reconfiguration steps only
#---
if [ $RECONFIGURE == 1 ]; then
#    log "Re-running configuration steps"
#    echo "=================================================================="
#    echo "Re-running configuration steps"
#    if is_master; then
#        log "No software package files will be updated"
#        echo "No software package files will be updated"
#        echo "=================================================================="
#        reconfig_head_node
#    else
#        log "ubuntu system packages will be updated, but not Torrent Suite packages"
#        echo "ubuntu system packages will be updated, but not Torrent Suite packages"
#        echo "=================================================================="
#        reconfig_compute_node
#    fi
    not_implemented
    exit 0
fi
#---
#---    N.B. When a hostname change is specified, all other options are ignored
#---
if [ $UPDATE_HOSTNAME == 1 ]; then
    needs_root
    2>&-
    oldFQDN=$(hostname)
    ## User prompts to get new hostname and domain
    # Defines three variables: newHostName, newDomainName, newFQDN
    get_input_hostname
    
    # Set new name (so Ansible will pick it up as {{ansible_hostname}} and {{ansible_fqdn}})
    /bin/hostname ${newHostName}
    echo "${newHostName}" > /etc/hostname
    echo "${newHostName}" > /etc/mailname
    sed -i "s/^127\.0\.1\.1.*/127.0.1.1 ${newFQDN} ${newHostName}/" /etc/hosts
    if [ -f /etc/postfix/main.cf ]; then
        sed -i "s/${oldFQDN}/${newFQDN}/g" /etc/postfix/main.cf
    fi
    
    hostfiles=$(find /usr/share/ion-tsconfig/ansible -name torrentsuite_hosts\*)
    for hostfile in ${hostfiles[@]}; do
        sed -i -e "/^\[headnode\]/ { n ; s/^.*/${newHostName} ansible_connection=local/ }" $hostfile
    done
    
    log "Changing hostname"
    ANSIBLE_HOME=/usr/share/ion-tsconfig/ansible
    MY_HOSTS=torrentsuite_hosts
    if [ -r $ANSIBLE_HOME/torrentsuite_hosts_local ]; then
        MY_HOSTS=torrentsuite_hosts_local
    fi

    cd $ANSIBLE_HOME
    ansible-playbook rename_headnode.yml \
        -i ${ANSIBLE_HOME}/${MY_HOSTS} \
        --sudo
    
    (
    set +e
    qconf -de $oldFQDN
    qconf -ds $oldFQDN
    qconf -dh $oldFQDN
    )
    
    #DIAGNOSTICS
    if false; then
        echo "===================================================================="
        cat /var/lib/gridengine/iontorrent/common/act_qmaster
        cat /var/lib/gridengine/iontorrent/common/host_aliases
        cat /etc/hosts
        cat /etc/hostname
        cat /etc/mailname
        grep "\[headnode\]" -A1 /usr/share/ion-tsconfig/ansible/torrentsuite_hosts*
        cat /etc/postfix/main.cf
        echo "===================================================================="
    fi

    exit 0
fi

#---
#---    Execute the timezone configuration script
#---
if [ $CONF_TIME_ZONE == 1 ]; then
    # First prompt user for interactive timezone setting
    dpkg-reconfigure tzdata
    # Next, propagate the headnode's settings to the computes
    cd $ANSIBLE_HOME
    ansible-playbook -i ${ANSIBLE_HOME}/${MY_HOSTS} timezone.yml --sudo
fi

#---
#---    Execute the postfix configuration script
#---
if [ $CONF_POSTFIX == 1 ]; then
    not_implemented
#	log "configuring postfix"
#    dpkg-reconfigure postfix
fi
#---
#---    Execute the deb package purge command
#---
if [ $PURGE_ALL_DEB == 1 ]; then
    log "Deleting all deb package files"
    apt-get clean
fi

if [ $CHANGE_PASSWORD == 1 ]; then
    not_implemented
#    exec 2>&3   # Redirect stderr (which points to a file) back to stderr (console)
#    config_password
fi
exit 0
