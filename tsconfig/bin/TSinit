#!/bin/bash
# Copyright (C) 2012 Ion Torrent Systems, Inc. All Rights Reserved
#
# Purpose: Provide functions necessary to initialize Torrent Server hardware
#
#
set -e

#---                                    ---#
#--- Function Declarations              ---#
#---                                    ---#
function print_help()
{
    echo
    echo "Usage: TSinit [options]"
    echo -e "\t--proton-config               Create /results and /rawdata partition"
    echo -e "\t--pgm-config                  Create /results partition"
    echo -e "\t--dev device_name             Specify device to partition, (default: /dev/sdb)"
    echo -e "\t--test-results directory      Specify mountpoint instead of /results (for testing only)"
    echo -e "\t--test-rawdata directory      Specify mountpoint instead of /rawdata (for testing only)"
    echo -e "\t-d,--debug                    Enable debug print (set -x)"
    echo -e "\t--help, -h                    Prints command line args"
    echo -e "\t--version                     Prints version"
    echo
    echo
}

function needs_root()
{
    if [ $(id -u) != 0 ]; then
        echo "Please run this script with root permissions:"
        echo
        echo "sudo $0"
        echo
        exit 1
    fi
    return 0
}

function migrate_contents()
{
    device=$1
    mtpoint=$2

    mkdir -p /mnt/tmp_$mtpoint
    mount $device /mnt/tmp_$mtpoint
    rsync -av $mtpoint/ /mnt/tmp_$mtpoint
    umount $device
    rmdir /mnt/tmp_$mtpoint
    rm -rf $mtpoint/*
}

#---                                    ---#
#--- Variable Declarations              ---#
#---                                    ---#
version=`echo '$Revision: 30408 $'|awk '{print $2}'`
SETUP_RESULTS_PARTITION=0
SETUP_RAWDATA_PARTITION=0
results_mtpt="/results"
rawdata_mtpt="/rawdata"

#---                                    ---#
#--- Command Line Options Parsing       ---#
#---                                    ---#

#--- If no args given, print help and exit ---#
if [ $# == 0 ]; then
    print_help
    exit 0
fi

#Default device to partition is
dev="/dev/sdb"

#---    We convert all arguments to lower case  ---#
while [ $# != 0 ]; do
    case ${1,,} in
        '--proton-config')
            SETUP_RESULTS_PARTITION=1
            SETUP_RAWDATA_PARTITION=1
        ;;
        '--pgm-config')
            SETUP_RESULTS_PARTITION=1
        ;;
        '--dev')
            shift
            dev=$1
        ;;
        '--test-results')
            shift
            results_mtpt=$1
        ;;
        '--test-rawdata')
            shift
            rawdata_mtpt=$1
        ;;
        '-d'|'--debug')
        	set -x
        ;;
        '--help'|'-h'|\?)
            print_help
            exit 0
        ;;
        '--version'|'-v')
            echo "`basename $0` version $version"
            if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
                source /opt/ion/bin/ion-tsconfig.version.env
                IonVersionGetFullVersion ion-tsconfig
            fi
			exit 0
        ;;
        *)
        echo "Unknown option: $1.  Exiting"
        echo "Use TSinit --help for options."
        exit 1
        ;;
    esac
    shift
done

#---                                    ---#
#--- Main Execution                     ---#
#---                                    ---#
if [ $SETUP_RESULTS_PARTITION -eq 1 -a $SETUP_RAWDATA_PARTITION -eq 1 ]; then

    # Must have root permissions to continue
    needs_root

    #
    # Sets up a new partition on dedicated hardware for Torrent Server
    #
    #   - check for /dev/sdb1 and exit if it doesn't exist
    #   - display partition info
    #   - create GPT partition and format as ext4
    #   - copy /results on /dev/sda1 to /results on /dev/sdb1
    #   - Delete all files in /results on /dev/sda1
    #   - mount /dev/sdb1 at /results
    #   (See jira issue TS-3559 for more details)

    if ! test -b ${dev}; then
        echo "Device: $dev does not exist.  Exiting."
        exit
    fi

    # install pre-requisites: parted
    if ! dpkg -l parted|grep -q ^ii; then
        apt-get install parted
    fi

    # Get user confirmation
    echo
    echo
    echo "This will create two partitions on ${dev} and format and mount"
    echo "them at $results_mtpt and $rawdata_mtpt mountpoints."
    echo "The contents of the current $results_mtpt will migrate to the new partition."
    echo
    echo "WARNING!  Any data on partition ${dev} will be deleted"
    echo "Continue only if you are sure you want to reformat ${dev}"
    read -p"Type Yes to continue: " usrin
    if [ "$usrin" != "Yes" ]; then
        exit
    fi

    # Create GPT partition table and two primary partitions
    parted ${dev} mklabel gpt
    parted ${dev} mkpart primary 0% 40%
    parted ${dev} mkpart primary 40% 100%


    # Format the partition with ext4 filesystem
    # Note: will not work for filesystems > 16TB, using Ubuntu 10.04 mkfs package.
    if ! mkfs.ext4 ${dev}1; then
        echo "there was an error in mkfs.ext4 formatting ${dev}1 "
        exit 1
    fi
    if ! mkfs.ext4 ${dev}2; then
        echo "there was an error in mkfs.ext4 formatting ${dev}2"
        exit 1
    fi

    # Prepare raw data directory
    mkdir -p $rawdata_mtpt
    chmod 777 $rawdata_mtpt
    mount ${dev}2 $rawdata_mtpt
    echo "${dev}2 has been mounted at $rawdata_mtpt"

    # Move contents of current /results directory to new partition
    if [ -d $results_mtpt ]; then
        migrate_contents ${dev}1 $results_mtpt
    else
        mkdir -p $results_mtpt
        chmod 777 $results_mtpt
    fi

    mount ${dev}1 $results_mtpt
    echo "${dev}1 has been mounted at $results_mtpt"

    #Edit /etc/fstab to automount at boot
    if ! grep "^${dev}1" /etc/fstab; then
        echo -e "${dev}1\t${results_mtpt}\text4\tdefaults\t0 0" >> /etc/fstab
    fi
    if ! grep "^${dev}2" /etc/fstab; then
        echo -e "${dev}2\t${rawdata_mtpt}\text4\tdefaults\t0 0" >> /etc/fstab
    fi

elif [ $SETUP_RESULTS_PARTITION -eq 1 -a $SETUP_RAWDATA_PARTITION -eq 0 ]; then

    # Must have root permissions to continue
    needs_root

    #
    # Sets up a new partition on dedicated hardware for Torrent Server
    #
    #   - check for /dev/sdb1 and exit if it doesn't exist
    #   - display partition info
    #   - create GPT partition and format as ext4
    #   - copy /results on /dev/sda1 to /results on /dev/sdb1
    #   - Delete all files in /results on /dev/sda1
    #   - mount /dev/sdb1 at /results
    #   (See jira issue TS-3559 for more details)

    if ! test -b ${dev}; then
        echo "Device: $dev does not exist.  Exiting."
        exit
    fi

    # install pre-requisites: parted
    if ! dpkg -l parted|grep -q ^ii; then
        apt-get install parted
    fi

    # Get user confirmation
    echo
    echo
    echo "This will create a single partition on ${dev} and format and mount"
    echo "it at $results_mtpt mountpoint.  The contents of the current $results_mtpt will"
    echo "migrate to the new partition."
    echo
    echo "WARNING!  Any data on partition ${dev} will be deleted"
    echo "Continue only if you are sure you want to reformat ${dev}"
    read -p"Type Yes to continue: " usrin
    if [ "$usrin" != "Yes" ]; then
        exit
    fi

    # Create GPT partition table and one primary partition
    parted ${dev} mklabel gpt
    parted ${dev} mkpart primary 0% 100%

    # Format the partition with ext4 filesystem
    # Note: will not work for filesystems > 16TB, using Ubuntu 10.04 mkfs package.
    if ! mkfs.ext4 ${dev}1; then
        echo "there was an error in mkfs.ext4 formatting ${dev}1 "
        exit 1
    fi

    # Move contents of current /results directory to new partition
    if [ -d $results_mtpt ]; then
        migrate_contents ${dev}1 $results_mtpt
    else
        mkdir -p $results_mtpt
        chmod 777 $results_mtpt
    fi
    mount ${dev}1 $results_mtpt
    echo "${dev}1 has been mounted at $results_mtpt"

    #Edit /etc/fstab to automount at boot
    if ! grep "^${dev}1" /etc/fstab; then
        echo -e "${dev}1\t$results_mtpt\text4\tdefaults\t0 0" >> /etc/fstab
    fi
fi
echo -e "\nTSinit is finished\n"
exit
