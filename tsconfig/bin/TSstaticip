#!/bin/bash
# Copyright (C) 2011 Ion Torrent Systems, Inc. All Rights Reserved
set -e
configfile=/etc/network/interfaces
#
# Purpose: Configure Torrent Server primary ethernet adapter for static IP.
#
# Method: Have command line options to define required parameters - if variables
# are not defined, use prompt to get user input.
#
# Return:  Error Codes
#   0  - Success
#   1  - Unknown command line option
#   10 - User aborted
#   11 - Bad IP address
#   12 - Bad subnet netmask
#   13 - Bad network ID
#   14 - Bad broadcast IP
#   15 - Bad gateway/router IP

#--------------------------------------
# Include function definition file
#--------------------------------------
TSCONFIG_SRC_DIR='/usr/share/ion-tsconfig'
source $TSCONFIG_SRC_DIR/ts_params
source $TSCONFIG_SRC_DIR/ts_functions

#--------------------------------------
# Functions
#--------------------------------------
function network_functionality ()
{
    network_test_results=$(mktemp -t init_netstat.XXXXX)
    if network_tests $1 >> ${network_test_results}; then
        net_stat='good'
    else
        net_stat='bad'
    fi
}

function print_help ()
{
    echo
    echo "Usage: TSstaticip [option]..."
    echo -e "\t--ip                          Define host IP address"
    echo -e "\t--nm                          Define subnet mask (netmask)"
    echo -e "\t--gw                          Define gateway/router IP address"
    echo -e "\t--remove                      Sets up dhcp, removing any static IP settings"
    echo -e "\t--debug, -d                   Prints script commands when executing (set -x)"
    echo -e "\t--demo                        Prints what changes would be executed only.  No changes are made"
    echo -e "\t--help, -h                    Prints command line args"
    echo -e "\t--version, -v                 Prints version"
    echo
    echo "Executing the command with no options will force prompting of each parameter"
    echo
}

#--------------------------------------
# Trap exit
#--------------------------------------
trap 'error ${LINENO}' ERR

#--------------------------------------
# Default settings
#--------------------------------------
version=`echo '$Revision: 25712 $'|awk '{print $2}'`
device="eth0"
user_confirm=0
DEMO=0
REMOVE=0

# Log command line arguments
cmdline=${@}

#--------------------------------------
# command line argument parsing
#--------------------------------------
#---    We convert all arguments to lower case  ---#
while [ $# != 0 ]; do
    case ${1,,} in
        '--help'|'-h')
            print_help
            exit 0
        ;;
        
        '--version'|'-v')
            echo "`basename $0` version $version"
            if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
                source /opt/ion/bin/ion-tsconfig.version.env
                IonVersionGetFullVersion ion-tsconfig
            fi
            exit 0
        ;;
        
        '--debug'|'-d')
        set -x
        ;;
        
        '--demo')
        DEMO=1
        ;;
        
        '--ip'|'-ip')
        shift
        ipaddress=$1
        if ! is_valid_ipaddress $ipaddress; then
            echo "Exiting $0 early due to error"
            error ${LINENO} "Invalid IP address $ipaddress" 11
        fi
        ;;
        
        '--nm'|'-nm')
        shift
        netmask=$1
        if ! is_valid_netmask $netmask; then
            echo "Exiting $0 early due to error"
            error ${LINENO} "Invalid netmask address $netmask" 12
        fi
        ;;
        
        '--gw'|'-gw')
        shift
        gateway=$1
        if ! is_valid_ipaddress $gateway; then
            echo "Exiting $0 early due to error"
            error ${LINENO} "Invalid gateway address $gateway" 15
        fi
        ;;
        
        '--remove')
        REMOVE=1
        ;;
        
        *)
        log "Unknown option: $1"
        echo "Unknown option: $1.  Exiting"
        echo "Use TSstaticip --help for options."
        exit 1
        ;;
    esac
    shift
done

#--------------------------------------
# Must be root to edit network config file
#--------------------------------------
needs_root

# Log command line arguments
log $cmdline

#--------------------------------------
# Store current network settings
#--------------------------------------
interfaces_backup=$(mktemp -t interfaces.XXXXX)
cp /etc/network/interfaces ${interfaces_backup}
resolvconf_backup=$(mktemp -t resolvconf.XXXXX)
cp /etc/resolv.conf ${resolvconf_backup}
network_functionality $device
log "initial networking is $net_stat"
init_net_stat=$net_stat

#--------------------------------------
# Process a remove request first, then exit
#--------------------------------------
if [ $REMOVE -eq 1 ]; then
    if [ $DEMO -eq 1 ]; then
        #--------------------------------------
        # Display what would be done, then exit
        #--------------------------------------
        
        if grep "iface $device inet dhcp" $configfile; then
            echo
            echo "$device is already configured for dhcp"
            echo
        fi
        
        if grep -q "iface $device inet static" $configfile; then
            echo
            echo -e "The following lines in $configfile would be changed from:\n"
            echo "iface $device inet static"
            sed -n "/iface $device inet static/,/^iface/ s/address .*/&/p" $configfile
            sed -n "/iface $device inet static/,/^iface/ s/netmask .*/&/p" $configfile
            sed -n "/iface $device inet static/,/^iface/ s/gateway .*/&/p" $configfile
            echo -e "\nto:\n"
            echo -e "iface $device inet dhcp"
        fi
        echo
    else
        #--------------------------------------
        #Remove the static IP and restore to dhcp
        #--------------------------------------
        sed -i "/iface $device inet static/,/^auto/ s/address.*$//g" $configfile
        sed -i "/iface $device inet static/,/^auto/ s/netmask.*$//g" $configfile
        sed -i "/iface $device inet static/,/^auto/ s/gateway.*$//g" $configfile
        sed -i "/iface $device inet static/,/^auto/{/^$/d}" $configfile
        # Setup dhcp
        sed -i "s/iface $device inet static/iface $device inet dhcp\n/" $configfile
        # This is redundant, no?
        sed -i "s/iface $device inet dhcp/iface $device inet dhcp/" $configfile
        
        copy_conf_file $configfile
    fi
    
else

    #--------------------------------------
    # setup static ip settings
    #--------------------------------------
    # IP address
    if [ -z $ipaddress ]; then
        valid=1
        while [ $valid -eq 1 ]; do
            
            read -p "Enter the IP address for this host: " ipaddress
            
            if ! is_valid_ipaddress $ipaddress; then
                echo "Exiting script early due to error"
                error ${LINENO} "Invalid IP address $ipaddress" 11
            else
                valid=0
                user_confirm=1
            fi
        done
    fi
    # Netmask
    if [ -z $netmask ]; then
        valid=1
        while [ $valid -eq 1 ]; do
            
            read -p "Enter the netmask for this host: " netmask
            
            if ! is_valid_netmask $netmask; then
                echo "Exiting script early due to error"
                error ${LINENO} "Invalid netmask address $netmask" 12
            else
                valid=0
                user_confirm=1
            fi
        done
    fi
    # Gateway
    if [ -z $gateway ]; then
        valid=1
        while [ $valid -eq 1 ]; do
            
            read -p "Enter the IP address of the gateway: " gateway
            
            if ! is_valid_ipaddress $gateway; then
                echo "Exiting script early due to error"
                error ${LINENO} "Invalid network address $network" 13
            else
                valid=0
                user_confirm=1
            fi
        done
    fi
    
    if [ $DEMO -eq 1 ]; then
        #--------------------------------------
        # Display what would be done, then exit
        #--------------------------------------
        echo
        echo -e "The following lines in $configfile would be changed from:\n"
        
        if grep "iface $device inet dhcp" $configfile; then
            echo -e "\nto:\n"
            echo -e "iface $device inet static\naddress $ipaddress\nnetmask $netmask\nnetwork $network\nbroadcast $broadcast\ngateway $gateway\n"
        fi
        
        if grep -q "iface $device inet static" $configfile; then
            echo "iface $device inet static"
            sed -n "/iface $device inet static/,/^iface/ s/address .*/&/p" $configfile
            sed -n "/iface $device inet static/,/^iface/ s/netmask .*/&/p" $configfile
            sed -n "/iface $device inet static/,/^iface/ s/gateway .*/&/p" $configfile
            echo -e "\nto:\n"
            sed -n "/iface $device inet static/iface $device inet static\naddress $ipaddress\nnetmask $netmask\nnetwork $network\nbroadcast $broadcast\ngateway $gateway\n" $configfile
        fi
        echo
        
    else
    
        if [ $user_confirm -eq 1 ]; then
            echo
            echo "-----------------------------------------"
            echo "These are the settings that will be used:"
            echo iface $device inet static
            echo address $ipaddress
            echo netmask $netmask
            echo gateway $gateway
            echo
            input=N
            read -p "Proceed with configuration change (Y|N)? " input
            echo
            if [ "$input" == 'Y' -o "$input" == 'y' -o "$input" == "yes" -o "$input" == "Yes" -o "$input" == "YES" ]; then
                echo "Continue with configuration change."
            else
                echo "User aborted the configuration.  No changes were made."
                error ${LINENO} "User aborted the script" 10
            fi
        fi
        
        #--------------------------------------
        # search for current settings and remove
        #--------------------------------------
        # First case: static ip settings.  If its already static, remove all the lines containing parameters up until the next iface line
        # Search for settings after $device up until the next device or the end of file
        sed -i "/iface $device inet static/,/^auto/ s/address.*$//g" $configfile
        sed -i "/iface $device inet static/,/^auto/ s/netmask.*$//g" $configfile
        sed -i "/iface $device inet static/,/^auto/ s/gateway.*$//g" $configfile
        sed -i "/iface $device inet static/,/^auto/{/^$/d}" $configfile
        sed -i "s/iface $device inet static/iface $device inet static\naddress $ipaddress\nnetmask $netmask\ngateway $gateway\n/g" $configfile
        # Second case: default dhcp settings.  If its currently dhcp, then replace 'dhcp' with 'static' and add a bunch of lines
        sed -i "s/iface $device inet dhcp/iface $device inet static\naddress $ipaddress\nnetmask $netmask\ngateway $gateway\n/g" $configfile
    
        copy_conf_file $configfile
    fi
fi

#--------------------------------------
# Restart networking
#--------------------------------------
/sbin/ifdown $device && /sbin/ifup $device
network_functionality $device
if [ "$net_stat" == "bad" ]; then
    if [ "$init_net_stat" == "good"]; then
        log "ERROR: We busted a working network."
        
    else
        log "Did not fix a busted network."
    fi
else
    #We're good
    log "networking is $net_stat"
fi

#--------------------------------------
# Clean up
#--------------------------------------
rm -f ${interfaces_backup}
rm -f ${resolvconf_backup}
rm -f ${network_test_results}

log "$0 completed successfully"
exit 0
