#!/bin/bash
# Copyright (C) 2011 Ion Torrent Systems, Inc. All Rights Reserved
#------------------------------------------------------------------------------#
#---																		---#
#---	Removes krufty files generated by analysis pipeline which are not	---#
#---	necessary for anything												---#
#---																		---#
#---	
#------------------------------------------------------------------------------#
set -u

function test_dialog ()
{
	which $DIALOG >/dev/null
    if [ $? -ne 0 ]; then
    	echo "$DIALOG not installed."
        echo "Try sudo apt-get install $DIALOG"
		exit 0
    fi
}

function user_cancelled ()
{
	msg="User cancelled operation"
	$DIALOG --title "$mainTitle" --infobox "$msg" 3 $((${#msg}+5))
    exit 0
}

mainTitle="File Purge System"
DIALOG=dialog
SRCHDIR=/results/analysis/output
DAYSAGO=30
REALLY_DELETE=0

test_dialog

#---	List of default files to search for: user can disable at runtime	---#
SRCHFILES=(
    "1.cafie-residuals"
    "bkg_debug"
	"core.\*.\*.\*"
    "Default.sam.parsed"
    "Default.alignments"
    "wellStats.txt"
    "trunc.\*"
    "out.txt"
    "\*.bmf"
    "\*.baf"
    "\*.coverage"
    "\*.Readlen.Histo"
    "regionCafieDebug.txt"
    "prebeadfindData.txt"
    "prebfmask.*"
    "postbfmask.*"
    "averagedKeyTraces_\*.txt"
    "stats-samples.txt"
    "\*mask"
    )

#---	Set path menu	---#
$DIALOG --title "$mainTitle" --inputbox "Directory to start search in" 5 50 $SRCHDIR 2> /tmp/tmp.list
if [ $? -ne 0 ]; then
	user_cancelled
fi
SRCHDIR=$(</tmp/tmp.list)
rm -f /tmp/tmp.list

#---	validate the directory	---#
if [ ! -d $SRCHDIR ]; then
	msg="ERROR: Invalid directory:\n$SRCHDIR"
	$DIALOG --title "$mainTitle"\
    		--keep-window \
    		--infobox "$msg" 5 $((${#msg}+5))
    exit 0
fi


#---	Set number of days menu	---#
$DIALOG --title "$mainTitle" --inputbox "Minimum age of files (days) " 5 50 $DAYSAGO 2>/tmp/tmp.list
if [ $? -ne 0 ]; then
	user_cancelled
fi
DAYSAGO=$(</tmp/tmp.list)
rm -f /tmp/tmp.list


#---	Edit file types menu	---#
num=1
listItems=
for i in ${SRCHFILES[@]}; do
	listItems="$listItems $num "$i"	on"
    num=$(($num+1))
done

$DIALOG --title "$mainTitle" \
		--separate-output \
        --cancel-label "Quit" \
        --checklist "File Types" 25 60 20 ${listItems[@]} 2>/tmp/tmp.list
if [ $? -ne 0 ]; then
	user_cancelled
fi
FILES=
VALUES=$(</tmp/tmp.list)
rm -f /tmp/tmp.list
for i in ${VALUES[@]}; do
	i=$(($i-1))
	FILES=(${FILES[@]} ${SRCHFILES[$i]})
done


#---	Get list of files that match criteria	---#
totalSaved=0
items=
numFiles=${#FILES[@]}
i=1
echo -n "">/tmp/tmp.filelist
for SRCHTRM in ${FILES[@]}
do
	# info for progress bar
    percentDone=$(printf "%.0f" $(echo $i $numFiles|awk '{print $1/$2*100}'))
    echo $i $numFiles $percentDone
    msg="Getting list of matching files"
	echo "exit"|$DIALOG --keep-window --gauge "$msg" 6 70 $percentDone
    
	saved=0
    CMMD="find ${SRCHDIR} -name $SRCHTRM -mtime +$DAYSAGO"
    for item in $(eval $CMMD); do
    	if [ -w "$item" ]; then
    		# saved to file
            echo $item >> /tmp/tmp.filelist
            this=$(du -m "$item" | awk '{print $1}')
        	saved=$(($saved+$this))
        fi
    done
    
    totalSaved=$(($totalSaved+$saved))
    
    i=$(($i+1))
done


#---	Final Configuration menu	---#
msg="\nCurrent search parameters\n\n"
msg=$msg"Search Directory: \Z5$SRCHDIR\Zn\n"
msg=$msg"Files Older Than \Z5$DAYSAGO\Zn"
if [ $DAYSAGO -gt 1 ]; then
	msg="$msg days\n\n"
else
	msg="$msg day\n\n"
fi

msg="${msg}Disk usage: $totalSaved mbytes\n"
#msg=$msg"${#items[@]} Files that could be deleted\n\n"

#for i in ${items[@]}; do
#	msg="${msg}\n${i}"
#done

$DIALOG --colors \
		--title "$mainTitle" \
        --no-label "Quit" \
        --msgbox "$msg" -1 -1
if [ $? -ne 0 ]; then
	user_cancelled
fi


#---	Delete or Quit Option Menu	---#
$DIALOG --title "$mainTitle" \
		--clear \
		--cancel-label "Quit" \
		--radiolist "Confirm whether to Delete" 9 50 5\
	1	"Exit, I'm done" on \
    2	"Delete Files" off \
    2> /tmp/tmp.list
if [ $? -ne 0 ]; then
	user_cancelled
fi

if [ $(</tmp/tmp.list) -eq 1 ]; then
	REALLY_DELETE=0
else
	REALLY_DELETE=1
fi
if [ $REALLY_DELETE -eq 0 ]; then
	rm -f /tmp/tmp.list
	exit 0
fi
rm -f /tmp/tmp.list

#---	DELETING THE FILES NOW	---#
saved=0
totalSaved=0
deleted=
i=0
numItems=$(wc -l /tmp/tmp.filelist)
for item in $(</tmp/tmp.filelist); do

	# info for progress bar
    percentDone=$(printf "%.0f" $(echo $i $numItems|awk '{print $1/$2*100}'))
    msg="Deleting Files"
	echo "exit"|$DIALOG --keep-window --gauge "$msg" 6 70 $percentDone
    
	delCnt=0
	if [ -w "$item" ]; then
    	size=$(du -m "$item" | awk '{print $1}')
    	rm -rf "$item"
        if [ $? -eq 0 ]; then
    		totalSaved=$(($totalSaved+$size))
        	deleted="${deleted}\n${item}"
            delCnt=$(($delCnt+1))
        else
        	:
        fi
    fi
    
    i=$(($i+1))
done


#---	Final Status Page	---#
msg="\n"
msg="${msg}Total Space Recovered: $totalSaved mbytes\n"
msg="${msg}Total Files Deleted: $delCnt\n\n"
#msg="${msg}${deleted}"

$DIALOG --title "$mainTitle" --msgbox "$msg" -1 -1

exit 0
