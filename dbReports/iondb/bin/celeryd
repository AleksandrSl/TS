#!/bin/sh -e
# Copyright (C) 2011 Ion Torrent Systems, Inc. All Rights Reserved
### BEGIN INIT INFO
# Provides:          celeryd
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: celery task worker daemon
### END INIT INFO

# Name of the projects settings module.
export DJANGO_SETTINGS_MODULE="iondb.settings"
export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"

# Name of nodes to start, here we have a single node
CELERYD_NODES="w1 plugins"

# Where to chdir at start.
CELERYD_CHDIR="/opt/ion"

# How to call "manage.py celeryd_multi"
CELERYD_MULTI="$CELERYD_CHDIR/manage.py celeryd_multi"

# Extra arguments to celeryd
CELERYD_OPTS="--beat --concurrency=4 --events"
CELERYD_QUEUES="-Q:plugins plugins"

# The following abbreviations will be expanded in file names below
# * %n -> node name
# * %h -> host name
CELERYD_LOG_FILE="/var/log/ion/celery_%n.log"
CELERYD_PID_FILE="/var/run/celery/celery_%n.pid"

CELERYD_USER="root"
CELERYD_GROUP="root"
CELERYD_PLUGIN_USER="ionian"
CELERYD_PLUGIN_GROUP="ionian"

CELERYD_LOG_LEVEL="INFO"
CELERYD="-m celery.bin.celeryd_detach"

if [ -n "$2" ]; then
    CELERYD_OPTS="$CELERYD_OPTS $2"
fi

# Extra start-stop-daemon options, like user/group.
DAEMON_OPTS="$DAEMON_OPTS --uid:w1=$CELERYD_USER"
DAEMON_OPTS="$DAEMON_OPTS --gid:w1=$CELERYD_GROUP"

DAEMON_OPTS="$DAEMON_OPTS --uid:plugins=$CELERYD_PLUGIN_USER"
DAEMON_OPTS="$DAEMON_OPTS --gid:plugins=$CELERYD_PLUGIN_GROUP"

DAEMON_OPTS="$DAEMON_OPTS --workdir=\"$CELERYD_CHDIR\""


check_dev_null() {
    if [ ! -c /dev/null ]; then
        echo "/dev/null is not a character device!"
        exit 1
    fi
}

check_privsep_dir() {
    # Create the PrivSep empty dir if necessary
    if [ ! -d /var/run/celery ]; then
        mkdir /var/run/celery
    fi
    chown -R ionian:ionadmin /var/run/celery
    chmod 0775 /var/run/celery
}

stop_workers () {
    $CELERYD_MULTI stop $CELERYD_NODES --pidfile="$CELERYD_PID_FILE" &
    stop=$!
    timeout=20
    while [ $timeout -gt 0 ]; do 
        sleep 1
        kill -0 $stop  2> /dev/null || break
        ((timeout -= 1))
    done
    kill -0 $stop  2> /dev/null&& echo Killing Celery && ps auxww | grep 'celery' | awk '{print $2}'|xargs kill -9 2> /dev/null || true
}

start_workers () {
    $CELERYD_MULTI start $CELERYD_NODES $CELERYD_QUEUES     \
                         $DAEMON_OPTS                       \
                         --pidfile="$CELERYD_PID_FILE"      \
                         --logfile="$CELERYD_LOG_FILE"      \
                         --loglevel="$CELERYD_LOG_LEVEL"    \
                         --cmd="$CELERYD"                   \
                         $CELERYD_OPTS
}

restart_workers () {
    stop_workers
    start_workers
}

check_status () {
    PID_FILES=`echo $CELERYD_PID_FILE|sed 's/%n/*/'`
    pids=`cat $PID_FILES 2> /dev/null` || pids=""
    if [ "$pids" != "" ];
    then
        echo "Celery is running with pids:"
        echo $pids
    else
        echo "No Celery node processes."
        exit 1
    fi
}

case "$1" in
    start)
        check_dev_null
        check_privsep_dir
        start_workers
    ;;

    stop)
        check_dev_null
        stop_workers
    ;;

    reload|force-reload)
        echo "Use restart"
    ;;

    status)
        check_status
    ;;

    restart)
        check_dev_null
        check_privsep_dir
        restart_workers
    ;;

    try-restart)
        check_dev_null
        check_privsep_dir
        restart_workers
    ;;

    *)
        echo "Usage: /etc/init.d/celeryd {start|stop|restart|try-restart|kill}"
        exit 1
    ;;
esac

exit 0
