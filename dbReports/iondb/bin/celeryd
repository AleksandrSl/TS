#!/bin/sh
# Copyright (C) 2011 Ion Torrent Systems, Inc. All Rights Reserved
### BEGIN INIT INFO
# Provides:          celeryd
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: celery task worker daemon
### END INIT INFO

# Name of the projects settings module.
export DJANGO_SETTINGS_MODULE="iondb.settings"
export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"

# Name of nodes to start, here we have a single node
CELERYD_NODES="w1 plugins periodic"

# Where to chdir at start.
CELERYD_CHDIR="/opt/ion"

# How to call "manage.py celeryd_multi"
CELERY_MULTI="$CELERYD_CHDIR/manage.py celery multi"

# The following abbreviations will be expanded in file names below
# * %n -> node name
# * %h -> host name
# Extra arguments to celeryd
CELERYD_OPTS="--events "
CELERYD_OPTS="$CELERYD_OPTS --loglevel=INFO"

CELERYD_REQ="--pidfile=/var/run/celery/celery_%n.pid"
CELERYD_REQ="$CELERYD_REQ --logfile=/var/log/ion/celery_%n.log"

CELERYBEAT="$CELERYD_CHDIR/manage.py celery beat"
CELERYBEAT_PID_FILE="/var/run/celery/celerybeat.pid"


if [ -n "$2" ]; then
    CELERYD_OPTS="$CELERYD_OPTS $2"
fi

check_dev_null() {
    if [ ! -c /dev/null ]; then
        echo "/dev/null is not a character device!"
        exit 1
    fi
}

check_privsep_dir() {
    # Create the PrivSep empty dir if necessary
    if [ ! -d /var/run/celery ]; then
        mkdir /var/run/celery
    fi
    chown -R ionian:ionadmin /var/run/celery
    chmod 0775 /var/run/celery
}

wait_pid () {
    pid=$1
    forever=1
    i=0
    while [ $forever -gt 0 ]; do
        kill -0 $pid 1>/dev/null 2>&1
        if [ $? -eq 1 ]; then
            echo "OK"
            forever=0
        else
            i=$((i + 1))
            if [ $i -gt 60 ]; then
                echo "Timed out while stopping (30s)"
                kill -9 "$pid"
                forever=0
            else
                kill -TERM "$pid"
                sleep 0.5
            fi
        fi
    done
}

stop_beat () {
    echo -n "Stopping celerybeat... "
    if [ -f "$CELERYBEAT_PID_FILE" ]; then
        wait_pid $(cat "$CELERYBEAT_PID_FILE")
    else
        echo "celerybeat not running"
    fi
}

start_beat () {
    echo "Starting celerybeat..."
    $CELERYBEAT $CELERYBEAT_OPTS                \
        --pidfile="$CELERYBEAT_PID_FILE"        \
        --logfile="/var/log/ion/celerybeat.log" \
        --loglevel=INFO                         \
        --detach
}

multi_command () {
    $CELERY_MULTI $1 $CELERYD_NODES \
        $CELERYD_OPTS               \
        $CELERYD_REQ                \
        --concurrency:w1=4          \
        --concurrency:plugins=2     \
        --queue:plugins=plugins     \
        --concurrency:periodic=6    \
        --queue:periodic=periodic
}

start_workers () {
    multi_command start;
    start_beat;
}

restart_workers () {
    stop_beat;
    multi_command restart;
    start_beat;
}

stop_workers () {
    stop_beat;
    multi_command stopwait;
    if ps aux|grep "/opt/ion/manage.py celery"|grep -q -v grep; then
        echo "There are still processes around!"
    fi
}

check_status () {
    pids=`cat /var/run/celery/celery_*.pid 2> /dev/null` || pids=""
    if [ "$pids" != "" ];
    then
        echo "Celery is running with pids:"
        echo $pids
    else
        echo "No Celery node processes."
        exit 1
    fi
}

case "$1" in
    start)
        check_dev_null
        check_privsep_dir
        start_workers
    ;;

    stop)
        check_dev_null
        stop_workers
    ;;

    reload|force-reload)
        echo "Use restart"
    ;;

    status)
        check_status
    ;;

    restart)
        check_dev_null
        check_privsep_dir
        restart_workers
    ;;

    try-restart)
        check_dev_null
        check_privsep_dir
        restart_workers
    ;;

    *)
        echo "Usage: /etc/init.d/celeryd {start|stop|restart|try-restart|kill}"
        exit 1
    ;;
esac

exit 0
