#!/bin/bash

### BEGIN INIT INFO
# Provides:          RSM_Launch
# Required-Start:    $time $network $named
# Required-Stop:     $time $network $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start RSMAgent daemon at boot time
# Description:       Enable RSMAgent service
### END INIT INFO

PROGNAME=RSMAgent_TS
LOGFILE=/var/log/$PROGNAME.log

function start()
{
  pid=`pidof RSMAgent_TS`
  if [ "$pid" == "" ]
  then
    echo -n "Starting service: RSMAgent_TS"
    echo serialnumber:`dmidecode -s system-serial-number` > /var/spool/ion/serial_number.alt
    # Note multiline input into product_info.alt
    echo hardwarename:`dmidecode -s system-product-name` > /var/spool/ion/product_info.alt
    echo biosversion:`dmidecode -s bios-version` >> /var/spool/ion/product_info.alt
    
    # create log file while we have root priv, make it writable by agent
	touch $LOGFILE
	chown ionadmin:ionadmin $LOGFILE
	chmod 664 $LOGFILE
    
    start-stop-daemon --start --chuid ionadmin --background --chdir "/var/spool/ion" --exec "/opt/ion/RSM/RSMAgent.sh"
  else
    echo "RSMAgent_TS already running?"
  fi
  return 0
}

function stop()
{
  pid=`pidof RSMAgent_TS`
  if [ "$pid" != "" ]
  then
    echo "stopping service: RSMAgent_TS"
    kill -2 $pid
    sleep 1
  else
    echo "service: RSMAgent_TS not running"
  fi
  return 0
}

function status()
{
  pid=`pidof RSMAgent_TS`
  if [ "$pid" == "" ]
  then
    echo "RSMAgent_TS is not running"
    return 1
  else
    echo "RSMAgent_TS is running"
  fi
  return 0
}

result=0

case "$1" in
  reload)                                   # Reload the service configuration.
    stop
    start
    result=$?
    ;;

  restart)                                  # Restart the service.
    stop
    start
    result=$?
    ;;

  start)                                    # Start the service.
    start
    result=$?
    ;;

  status)                                   # Determine if service is running.
    status
    result=$?
    ;;

  stop)                                     # Stop the service.
    stop
    result=$?
    ;;

  *)                                        # Otherwise display usage info.
    echo -n "Usage: $0 {reload|restart|start|status|stop}"
    ;;
esac

echo                                        # Force a linefeed.
exit $result
