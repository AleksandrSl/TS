#!/usr/bin/env python
# Copyright (C) 2011 Ion Torrent Systems, Inc. All Rights Reserved
import sys
import os
import traceback

def init_csv_file (filename,column_header):
    '''Creates and writes header to csv file'''
    # Add column headers for data not contained in alignment.summary file
    column_header.insert(0, "Index")
    column_header.insert(1, "ID")
    column_header.insert(2, "Sequence")
    column_header.insert(3, "Adapter")
    column_header.insert(4, "Annotation")
    try:
        f = open (filename, 'wb')
        for e in column_header:
            f.write ("%s," % e) #TODO: Fix trailing comma!
        f.write("\n")
    except IOError:
        print traceback.format_exc()
        return
    finally:
        f.close()
    return

def add_alignment_data (filename,data,bc_dict):
    '''Appends a line to the csv file'''
    try:
        f = open(filename, "ab")
        # first five columns are index, id_str, sequence, adapter, annotation
        f.write("%s," % bc_dict['index'])
        f.write("%s," % bc_dict['id_str'])
        f.write("%s," % bc_dict['sequence'])
        f.write("%s," % bc_dict['adapter'])
        f.write("%s," % bc_dict['annotation'])
        # following columns are data
        for d in data:
            f.write ("%s," % d) #TODO: Fix trailing comma!
        f.write("\n")
    except IOError:
        print traceback.format_exc()
        return
    finally:
        f.close()
    return

def parse_alignment_file (filename):
    '''Reads contents of alignment.summary file and extracts the data fields
    and column headers.'''
    columns = []
    data = []
    try:
        f = open(filename, "rb")
    
        for line in f:
            line = line.split('=')
            if len(line) <= 1:
                continue
            columns.append(line[0].strip())
            data.append(line[1].strip().replace(',',''))    # remove commas
    except IOError:
        print traceback.format_exc()
        return None, None
    finally:
        f.close()

    return columns, data

def parse_bcfile(fname):
    '''
    Parses the barcodeList.txt file into an array of barcode dictionaries
    This is the format of the input file (created by create_bc_conf in views.py):

    file_id single_nuke
    score_mode 0
    score_cutoff 0.9
    barcode 1,threebase_1,AAA,,,none,10,none
    barcode 2,threebase_2,AAC,None,,none,10,none
    barcode 3,threebase_3,AAG,None,,none,10,none
    '''
    try:
        f = open(fname, 'r')
        flines = f.readlines()
        f.close()
    except:
        print traceback.format_exc()
        return None

    # add nomatch entry which is not provided by barcodeList.txt
    barcode_set = [ {'index':0,
                     'id_str':'nomatch',
                     'sequence':'',
                     'adapter':'',
                     'annotation':'No matching barcode sequences',
                     'type':'',
                     'length':'',
                     'floworder':''}, ]
    for line in flines:
        if line.startswith('barcode'):
            record = line.lstrip("barcode ").rstrip().split(",")
            barcode_set.append({'index':record[0],
                                'id_str':record[1],
                                'sequence':record[2],
                                'adapter':record[3],
                                'annotation':record[4],
                                'type':record[5],
                                'length':record[6],
                                'floworder':record[7]})
    return barcode_set

def aggregate_alignment(dir,bcFname):
    '''Main function
    
    This will create a file called alignment_barcode_summary.csv.
    If the file already exists, it will get appended to, not overwritten.
    
    bcFname is barcodeList.txt file generated by create_bc_conf in views.py.
    '''
    bc_dict = parse_bcfile(bcFname)
    
    # Output csv file filename
    csvfilename = 'alignment_barcode_summary.csv'

    for bc in bc_dict:
        # Look for alignment summary file for this barcode
        ASfilename = os.path.join(dir,"alignment_%s.summary" % bc['id_str'])
        if os.path.isfile(ASfilename):
            columns, data = parse_alignment_file (ASfilename)
            if not columns or not data:
                continue
            
            if not os.path.isfile(csvfilename):
                init_csv_file(csvfilename,columns)
            add_alignment_data (csvfilename,data,bc)
            
        else:
            pass
            #TODO: Handle barcodes with no matches.
            #Do not put empty barcodes into aggregate until graphing code can handle them.
            
    if len(bc_dict) == 0:
        print "No matching files found"
    
if __name__ == "__main__":
    directory = sys.argv[1]
    bc_fname = sys.argv[2]
    sys.exit(aggregate_alignment(directory,bc_fname))
    
