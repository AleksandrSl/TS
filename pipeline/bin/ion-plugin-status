#!/usr/bin/env python
# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved


import os
import traceback
import json
import xmlrpclib
import optparse
import time
import socket

# import /etc/torrentserver/cluster_settings.py, provides PLUGINSERVER_PORT, PLUGINSERVER_HOST
import sys
sys.path.append('/etc')
from torrentserver.cluster_settings import *

import logging
LOG = logging.getLogger('ion-plugin-status')

def UpdatePluginStatus(pk, plugin, version, msg, host="127.0.0.1", port = PLUGINSERVER_PORT, method="update"):
    """
    Updates a plugins status through XMLRPC
    """
    # Get Fault so we can catch errors
    retries = 10
    delay = 5
    # Total timeout = 60*5 == 300 == 5min
    attempts = 0

    ret = ''
    while attempts < retries:
        try:
            conn = xmlrpclib.ServerProxy("http://%s:%d" % (host,port), verbose=False, allow_none=True)
            methodAttach = getattr(conn,method)
            ret = methodAttach(pk,plugin,msg)
            LOG.debug("Plugin Update returns: '%s'", ret)
            break
        except (socket.error, xmlrpclib.Fault, xmlrpclib.ProtocolError, xmlrpclib.ResponseError) as f:
            LOG.error("XMLRPC Error: %s",f)
            if attempts < retries:
                LOG.warn("Error connecting to plugin daemon at %s:%d. Retrying in %d", host, port, delay)
                time.sleep(delay)
                attempts += 1
            else:
                raise "Unable to connect to plugin daemon after multiple attempts"

    if ret:
        LOG.debug("Plugin '%s' Successfully Updated", plugin)
    else:
        LOG.error("Failed to update plugin status '%s' '%s'", plugin, ret)
    return ret


if __name__ == '__main__':

    options = optparse.OptionParser(description = 'Update a plugins status and json dataStore through the ionPlugin daeamon')

    options.add_option('-i', '--pk'     , dest = 'pk'     , action = 'store', default = "")
    options.add_option('-p', '--plugin' , dest = 'plugin' , action = 'store', default = "") ## Plugin Name
    options.add_option('-v', '--version' , dest = 'pluginversion' , action = 'store', default = "") ## Plugin Version
    options.add_option('-d', '--debug' , dest = 'debug' , action = 'store_true', default = False)

    # More precise identifiers
    #options.add_option('-k', '--pluginkey' , dest = 'pluginkey' , action = 'store', default = "") ## Plugin DB Key
    options.add_option('-r', '--resultkey', dest = 'resultkey' , action = 'store', default = "") ## ResultKey

    options.add_option('-s', '--msg' , dest = 'msg' , action = 'store', default = "",
                       help="Status message to set (if --convert is set status codes into verbose messages)")

    options.add_option('-c', '--convert' , dest = 'convert' , action = 'store_true', default = False,
                       help="Convert Unix exit codes provided with --msg (-s) into verbose messages")

    options.add_option('-m', '--method' , dest = 'method' , action = 'store', default = "update",
                       help="[DEPRECATED, IGNORED] The XML-RPC Method to use, defaults to 'update'")

    options.add_option('-j', '--jsonpath' , dest = 'jsonpath' , action = 'store', default = "",
                       help="Path to the JSON file to PUT")


    (options, argv) = options.parse_args(sys.argv)

    if options.debug:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.INFO

    logging.basicConfig(level=loglevel)

    # Provide a placeholder value for unspecified version
    if not options.pluginversion: options.pluginversion = '0'

    # Check required options
    opts = { "pk" : options.pk, "plugin" : options.plugin, "version": options.pluginversion }

    goodArgs = True
    for key, value in opts.iteritems():
        if not value:
            LOG.error("You must give the value for %s", key)
            goodArgs = False
    if not goodArgs:
        LOG.fatal("Bad command line arguments '%s'", sys.argv)
        sys.exit(1)

    # Set a status using 'update' method.
    if options.msg:
        updateMessage = options.msg

        if options.convert:
            if updateMessage == "0":
                updateMessage = "Completed"
            else:
                # Any non-zero exit status is Error
                updateMessage = "Error"

        updater = UpdatePluginStatus(options.pk,
                                     options.plugin, options.pluginversion,
                                     updateMessage,
                                     PLUGINSERVER_HOST,
                                     PLUGINSERVER_PORT,
                                     'update'
                                     )
        LOG.info("Updated plugin '%s--%s' on report '%s' to status '%s'", 
                 options.plugin, options.pluginversion, options.pk, updateMessage)

    if options.jsonpath:
        jsonfname = os.path.join(options.jsonpath,"results.json")
        try:
            with open(jsonfname, 'r') as f:
                updateJSON = f.read()
        except (OSError, IOError) as e:
            LOG.error("Unable to read the json file '%s': %s", jsonfname, e)
            updateJSON="{}"

        try:
            updateJSONloaded = json.loads(updateJSON)
        except:
            LOG.error("Invalid json syntax in file '%s'", jsonfname)
            LOG.exception(updateJSON)
            updateJSONloaded = {}

        updater = UpdatePluginStatus(options.pk,
                                     options.plugin, options.pluginversion,
                                     updateJSON,
                                     PLUGINSERVER_HOST,
                                     PLUGINSERVER_PORT,
                                     'resultsjson'
                                     )
        LOG.debug("Posted results.json for plugin '%s'", options.plugin)

