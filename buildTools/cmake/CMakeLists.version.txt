# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved
# Verison info

set (ION_TS_EXTERNAL "${PROJECT_SOURCE_DIR}/../external/")
#set (ION_TS_EXTERNAL "${CMAKE_BINARY_DIR}/external/")

set(ION_UPDATE_SERVER "updates.iontorrent.com") # internal developer can use just "updates"

#custom ExternalProject_add with timeout feature
IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}.${CMAKE_PATCH_VERSION} STRLESS 2.8.1)
  SET(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${ION_TS_EXTERNAL}/CMake
  )
ENDIF ()
include(ExternalProject)

find_program(LSB_RELEASE_COMMAND lsb_release)
if(LSB_RELEASE_COMMAND)
    execute_process(COMMAND ${LSB_RELEASE_COMMAND} -s -c
        OUTPUT_VARIABLE TMP_LSB_RELEASE_CODENAME
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(TOLOWER ${TMP_LSB_RELEASE_CODENAME} LSB_RELEASE_CODENAME)
    message(STATUS "LSB release codename: ${LSB_RELEASE_CODENAME}")
endif(LSB_RELEASE_COMMAND) 

set(cuda_proj_name "cudatoolkit")
if (${LSB_RELEASE_CODENAME} STREQUAL "oneiric" OR ${LSB_RELEASE_CODENAME} STREQUAL "precise")
    set(cuda_proj_version "4.2.9-11.04")
    set(cuda_tar_file "cudatoolkit_4.2.9_linux_64_ubuntu11.04.tar.gz")
    set(CUDA_VERSION "4.2")
else()
    set(cuda_proj_version "4.2.9-10.04")
    set(cuda_tar_file "cudatoolkit_4.2.9_linux_64_ubuntu10.04.tar.gz")
    set(CUDA_VERSION "4.2")
endif()
set(cuda_proj_name_version "${cuda_proj_name}-${cuda_proj_version}")

# Figure out state of current build
execute_process(COMMAND "hostname" "-f" 
                OUTPUT_VARIABLE BUILDHOST
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "date" "-u" "+%Y%m%d%H%M" 
                OUTPUT_VARIABLE BUILDDATE
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "svn" "info" "${PROJECT_SOURCE_DIR}"
                COMMAND "grep" "^URL" 
                COMMAND "sed" "s/^URL:.*svn\\///" 
                OUTPUT_VARIABLE SVNPATH
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "svn" "info" "${PROJECT_SOURCE_DIR}"
                COMMAND "grep" "^Revision" 
                COMMAND "sed" "s/^Revision: //" 
                OUTPUT_VARIABLE SVNREV
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "svn" "info" "${PROJECT_SOURCE_DIR}"
                COMMAND "grep" "^URL" 
                COMMAND "sed" "s/^URL: //" 
                OUTPUT_VARIABLE SVNURL
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "MAJOR" "${PROJECT_SOURCE_DIR}/version"
                COMMAND "sed" "s/^MAJOR=//" 
                OUTPUT_VARIABLE MAJOR
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "MINOR" "${PROJECT_SOURCE_DIR}/version"
                COMMAND "sed" "s/^MINOR=//" 
                OUTPUT_VARIABLE MINOR
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "RELEASE" "${PROJECT_SOURCE_DIR}/version"
                COMMAND "sed" "s/^RELEASE=//" 
                OUTPUT_VARIABLE RELEASE
                OUTPUT_STRIP_TRAILING_WHITESPACE)

# Variables which user can override - values persist between builds only if explicitly set
set (BUILDTAG 0 CACHE STRING "The build tag string. EG TSRC.")
if(BUILDTAG)
    set (ION_VERSION_BUILDTAG "${BUILDTAG}" CACHE INTERNAL "Build Tag" FORCE)
else()
    set (ION_VERSION_BUILDTAG "DEV-${BUILDHOST}" CACHE INTERNAL "Build Tag" FORCE)
endif()
set (BUILDNUM 0 CACHE STRING "The build number or date.")
if(BUILDNUM)
    set (ION_VERSION_BUILDNUM "${BUILDNUM}" CACHE INTERNAL "Build Number or Date" FORCE)
else()
    set (ION_VERSION_BUILDNUM "${BUILDDATE}" CACHE INTERNAL "Build Number or Date" FORCE)
endif()

# Variables which we always update between builds
set (ION_VERSION_MAJOR "${MAJOR}" CACHE INTERNAL "Version Major Number" FORCE)
set (ION_VERSION_MINOR "${MINOR}" CACHE INTERNAL "Version Minor Number" FORCE)
set (ION_VERSION_RELEASE "${RELEASE}" CACHE INTERNAL "Version Release Number" FORCE)
set (ION_VERSION_SVNPATH "${SVNPATH}" CACHE INTERNAL "SVN Path Number" FORCE)
set (ION_VERSION_SVNREV "${SVNREV}" CACHE INTERNAL "SVN Revision Number" FORCE)
set (ION_VERSION_SVNURL "${SVNURL}" CACHE INTERNAL "SVN URL" FORCE)
set (ION_VERSION_BUILDHOST "${BUILDHOST}" CACHE INTERNAL "Host the build was done on" FORCE)
# If we include this, it will force rebuilds when ever the date value changes -- eg every min
#set (ION_VERSION_BUILDDATE "${BUILDDATE}" CACHE INTERNAL "The date of the build" FORCE)

# Version config files
configure_file (
	"${PROJECT_SOURCE_DIR}/../buildTools/IonVersion.h.in"
	"${PROJECT_BINARY_DIR}/IonVersion.h" @ONLY
)
configure_file (
	"${PROJECT_SOURCE_DIR}/../buildTools/IonVersion.cpp.in"
	"${PROJECT_BINARY_DIR}/IonVersion.cpp" @ONLY
)
configure_file (
	"${PROJECT_SOURCE_DIR}/../buildTools/IonVersion.env.in"
	"${PROJECT_BINARY_DIR}/IonTorrent/IonVersion.env" @ONLY
)
install(FILES "${PROJECT_BINARY_DIR}/IonTorrent/IonVersion.env" DESTINATION /opt/ion/bin
    RENAME ${CMAKE_PROJECT_NAME}.version.env
)

# Custom target. Any target which uses version info should depend on this
add_custom_target(IONVERSION ALL COMMAND "make" "rebuild_cache")
