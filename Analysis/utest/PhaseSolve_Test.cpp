/* Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved */
#include <gtest/gtest.h>
#include "PhaseSolve.h"
 
/* Class with a SetUp() function for test fixtures, could also have a TearDown() */
class PhaseSolveTest : public ::testing::Test {
protected :
 
  virtual void SetUp() {
    flowString = "TACG";

    // Set up pure nuc concentrations
    concentration.resize(N_NUCLEOTIDES);
    for(unsigned int iNuc=0; iNuc < N_NUCLEOTIDES; iNuc++) {
      concentration[iNuc].assign(N_NUCLEOTIDES,0);
      concentration[iNuc][iNuc] = 1;
    }
    concentration[0][1] = 0.01;
    concentration[0][2] = 0.02;
    concentration[2][3] = 0.03;

    cf.assign(1,0.012);
    ie.assign(1,0.008);
    dr.assign(1,0.0005);

    droopType = ONLY_WHEN_INCORPORATING;
    nFlow = 200;

    maxAdvances = 2;
    nIterations = 10;
    debugBasecall = false;

    // Test on seqeunces that have been verified to work under the CAFIE conditions above.
    seq.push_back("ATATTGCTGACTTCTGTTACGGGGGTTACGCGCCCATGACGCCCGAACAATGGCAAAAAGGCAAGCACTATCCAGAAGCATAGCGTGGTGACAACGCGAA");
    seq.push_back("CACATAAGGAATGATAGGATTAAGAACATAGAATCTACCGCCCACAAAGATCCTTCTACTATTAGATGGCATGCTACTAAATCCTCGGCTCGGCGACGTT");
    seq.push_back("ATAAGAGCAGATATTATAGCTTACGCATAAAATACCATGACTAGGTGCTCTGATAGAACAACCTCGACCTGTGGCACTGAACGAAGTCTACTGGTTATCG");
    seq.push_back("CGATAGCGCCACCATCGGCTTTGAAGTGCGAGAACATTGAAGCCTATCTAAGAGGACCTGTTCTAGTTCCTGACTTCGAATAGTGATTGGGCGTCGCACT");
    seq.push_back("TACCAAACATGAATTCGTCATTCGGTTGTTTGAAAAAAGCAACATACGTGGGCAAATTGGTGCTGCTTCCACGCCCCTTACGGTGGTCCCTATATGCTCT");
    seq.push_back("GCCAGAATGGGGGCACAACTGGTGGCTACAATCCTTCTGTCACAGGCGGGCACCTTGGTTGTGTCCGGACGGCTGTCTCACTAGATGGGCCACTAGAGAA");
    seq.push_back("CAAGCGCTGGACGGGCATATAAGTGGGCTGCAGCGTTATGGTTAGGGGCGCCGTCCCTGACTCTCTTATGGCCGGTAACCGGGCCTGGTATAAAACTTCT");
    seq.push_back("AAGCGCTGCCAGGGGAATCGTGGCTGTCCAGCAATTGGCTTGCGATGAGTGGGATCTTGATCCTCAGTGAGGGTAGGGGCGCTACGCACAAACGAGGGGC");
    seq.push_back("CTCCACCAAACAATTCAAAGATATCTCTCTATGGAGTGGTGTATTTATTCGTAGTCCACGTCCCTGTGAGGGCGCACGAATGTTAGACTCTGTCAGTTCT");
    seq.push_back("GGCCCCATGTAGGGAGATTAGCCGAGGTCGTTAAACGACAACGGTTCTGATACCGCTCACTTAAACCGCGGCTAATTCGGCGGGTCTGGTTCTACTCTCG");
    seq.push_back("CGTACCATGTAACGGAATACCGCGCAATCCTTTGTAAATGTAGAGACTTCAATCTACTTTAGGTCCACCTTATCCGCGCCTCCGTAGAACTATCAATACA");
    seq.push_back("GGTGCTTCGTAGTTTCGATACACTTTAACGTTCTCGGATCAATTTTACTTCATGTTGATTGTGTGTCAACCACCTAATCTGTACCTATTAGGTACCATCA");
    seq.push_back("GCAGGTTGGCGTTTTCCAGTCCCGGGCCGTAACCTTAGCGTTCGGATTCCGGTAACGCGACTAGATCACGGAGTTAAGACAGTTGTAAAGACCCTCAACG");
    seq.push_back("ATATCTAAAGTACGTATCTCTCCTACTATATTTATATTATCAAGGTGGACTTTCTTGGTCGTCCTACGTCGCCGTACGGCTCAGGTGACCGTATATTCGG");
    seq.push_back("CAAGGGGGGTTCGCGTCAGAACAACACATTTATATCGCTCAGGGTAGAAAAACCCGCGGCCGCAGACACACGGTAGTGGTGTATACCCTAGCGACAATAG");
    seq.push_back("TGGGTCCGCAAACAGCCCATACTCCTCTCTTACCGCGTTAATACTTGAATACATGCGTCTTAAACGCAGAAGTATTTCTAATCATTGCGTCCTCGATTAC");
    seq.push_back("AATTCGGAAGAACCCAATGTGTACAGCTGGCGGACTTAATGATTGAAGTGCCCGGCAAAGGCAAGGACGAAAATTGATCTCGCGATTCTATCCAGTGGAA");
    seq.push_back("GAAGATCATGTAAATCAGGTGCCACTTTCATTATCATGAGAAGCACGAAAAGCCGTAGGCGGAGCCTAATGATCCAGTAGTACCCTACCGGTAGGGACGA");
    seq.push_back("ACAAGGAACATCCAGGTGACAGACCGTCTCCAGCAATACCAAGCAAATGAAGGCTTTGATACTGTTTGTATTACCACCTTCAGTCCTAATTACGGACCGA");
    seq.push_back("GTCTCTGGCTTGGGATCTCCGTTTTCCAGGGCCAAGTTAAGAGCGGATCCAAATTTCATTTGAAGCTCATCGTTTGCACGCGGGCGCGGCGCTGGCTCGT");
    seq.push_back("AGGTCCCTTACGCTCCTTAGCAAAGGTAGTATCTGGAACTAGCCCGGCGTTTTTAGCTGTGGGTCCGCCTACGCTTACAGATCAGCGTCATTGCTAGCCT");
    // These additional tests are available for more in-depth testing but for regular use are commented out for speed.
    //seq.push_back("AGCGTAGTCGCGGTGAAAACATCGAAGTCAGCGTACTGCCAGTGCCTGCTTCGATGAGCCGATATTCTCGACCTAGATACGAGAACGCTAGCACCTATGC");
    //seq.push_back("CGTGCTCCGCGACAAGGGTCGCTGTAGTTACCTATATAGCGACTCCCTTAAGGTACAGATTCAGCAGAAACGCGGGTTCTACCGCCTCATATCCCGCTTC");
    //seq.push_back("AAACTGTGCACCCGTGAGTAGATTCACGTATTCTAACTGTTAACGATGGTGATCTACCGCCCAGCCGGACCACGCTGAGATACGGAGTCAATGCCTGACG");
    //seq.push_back("TTCGCGAGAGTACACAAGGGTCCACATCCCAACCTGTTCTCAATACTATCTGGAGAACCGTGGATCGTCTGGTGCTACATGTGCTACAGGGCAACAGTTT");
    //seq.push_back("CGCATAAGATCACCATTTTGCGCGGTCAACTCTACGCCACACCCTGAGCTCGGGAACCACGTTCAATCGAGGCTAACATGAAAGGCGTGGACGTGGAGTG");
    //seq.push_back("GCATAAAGCTACTCTCGCAATACCAATAGGGATGTATTGAGGCCTAGCCGGATTGTTCTCACCTTCTGACGTATATTTCACTCAGTTGAGTATCATGTCG");
    //seq.push_back("CACCTGATCCTGAATTTGCACAAACATTACGCCTGACGTGATCATATTGATTCTAGATGAAACCTTGCCCTCAAGAACTTGGGTCGCCGTCGTGATCGAT");
    //seq.push_back("TTAAAGAAATTGCGCGAGAGGCCCACACTAAGACGATGATCACGGGCGCCCTGGAGTCAGCAACCTCCCGATGGCAAGGCTTAGCCAAGAGTCTCGGGTT");
    //seq.push_back("AAGGGAGGGCAGAAAGCAGTCCTGAAAGGACTAACGAAAGCAACCATGCGGGTCATCACTAGGAGAGGATCCTCGAGGTTACCTGCGTCTGGCCGACCGC");
    //seq.push_back("ATGTCAATGTGGATCGATCCGTTAAGACTGGTGAGTCGGTCAGCTTTTTAACAACAGCGCAAAGCGCGCTCGTTAGTTCGACTACCATGGAGTAAATCGA");
    //seq.push_back("GTCGGCCCGGGCATTGATAAGTCATGCGGTTAGAGACTCTCTAGTTATTATCAACTGGCACAATATTCGAAATAGGAGCTGAAGCCCTTTAATATATGCG");
    //seq.push_back("GATCGAGACAGCACGCGAGGCGAGCTAGATTGTGTCGCCTCAAGCTTTTCCCTCTAATTATGTGAGATACGCCTTGGGGCTTGGCCTCCGGAACGATGTT");
    //seq.push_back("AGCCCAATTGAGCTCGAAACGGCGTAGGGGGGATACTAAGGACTTGGAGGCAATGTTACCGTAGGATGATAGACCTTTTCCCCCATATAGAGCACAAAGA");
    //seq.push_back("AGGAAATTTTCCAGGAGTTGCTAGACGAGACGTTGTTCGTATAAGGAACTGGTGCTATTGAAATAGGTTAGAAGAGCCGGAACTGGGGCGACGAAGGGGG");
    //seq.push_back("TAGTTGCATTGATTTCCGATAAAGCCCTTTCGTTCGGGGCCCCAACGGTGCTGCCTGGTGCAACAGTGAGTGTCGTGACCGGACACAGATACACGATGGT");
    //seq.push_back("TTAGGGGAGCCGTAGTGTGGAAAATCGGCATCATTGCCGTGTGGTACCTTTTATTTACGGGCTGAGAGAGCGCTAAACCTCCTCAGACAGTGTGAAAAGA");
    //seq.push_back("GTTTTTTTCAGGCCTGATTAGGGCAGCAGTCATATGTGCAGTGACCGCCCCTTTATCGTTCATAAGGAATAGTTGAAACCCGAACCTGTTCATACAGTAG");
    //seq.push_back("TAAGTTGATTCCCGCGTCAGACGTCTTTTTCGACATAGTACCCGTGAGTAATCGTGGGCCGGTGTTCACCAGGCACTATTATGCCCTTAAAGGTACGCCT");
    //seq.push_back("GCCAGCCGCACCTTGCCCACCCTTATCTAGGTAATGCCATCCACCTGGAGTGTGCACGTCCCACCATTCAGGCGTGCCAGATATCCTGAGACAAGCACAC");
    //seq.push_back("CGATCTCGCGACCAATGACGGCTGGCAGGAAATATATAGAGTCATGTCGATAGGTATTGGTGGGGCGGCCGAAAATGTCATAACTTCGGAAGGGACTTTC");
    //seq.push_back("ACCACCTTAATTCACATGGGGTACCAGCTCGTGTTAATTATTTATAAGTTACGAGTCAAACGAACTACGTCGGCGCCTAAGAGACATGCAGGGGGAGGCA");
    //seq.push_back("GTGAACGCAGGGGAGTACCCCAAAGGAACCCTATTAACGATAGGAACAGTGTTGTCATGCCTACGAGTCATCAGTAGAAATGAGATACTGGACTCTTTGA");
    //seq.push_back("TGCTAATGCATAGTTTGTACCGCGCTCAGACGGGCGTCAACTATGTGCGGGTCACGTTTCTATCGCTCGTCTTGGCCCGATCTACCTAAGCTGCAAGTGA");
    //seq.push_back("GTTCCCTTGCTGGGGTTCTTTCGCGGGACAAATTCCAAATGTCACTACCTAAATGGCAGTAGTTCAAGCACTTGTCCTGGTGTTCCGTCAGCTCAACCGG");
    //seq.push_back("CTCCCCGTAACTGATACCTGCCTAGACTCTGGTTTAACTCCCAACTATATCGACGGCTCGTTAGTAGTCGATTCTAATTCGCTGGCATCCCACCGACATT");
    //seq.push_back("GAGCCCGCACGGGCAATATACAAGGGGTGGGCGAGTCAACGTTAATCTTATCCTTTCGGAACCGCTCTACAGAAGCTTATAAACTTACCGCCTGTCCAAC");
    //seq.push_back("GATGAGTACATCATGTGGAACCCATCCCCCGTGGGGACGCCCTCACCTACTCTACGCTTTAGGGAACAGTCTCACCGGAGTTTGAACCTAAAGTGGTTGC");
    //seq.push_back("TACAAGCGAGATCTGCATTTTTTGGGAGCTTATAATGGGGAGGCGATGTGCGCCAATCGAACCTGCGATATTTCCCCATAGAGTCTTAACCATGTCTCCT");
    //seq.push_back("GAGCCTGGTCGCCCCTAATAGAACGTGGATCGATTCTCAGGGAATCTTCGTTTTACGGTTGACGACTTGTCCGCCCGACAGATCAATGGGCATTGTAGGG");
    //seq.push_back("CTTTCACTAGTTGTAGTTCCGGGCCAACGGAACTTGAAGAGCTCAATTTACCTTGATGGGAGGGCCACGGGAACCACCACCCGAACCTTTCACTGGCGAT");
    //seq.push_back("CGTCTCCCGCGTGAAGCCGCATCCTTTACTTGCGTCTCGCGACCACTGGCTGCATATGAAGTTTCGACTGGGGTTTAGCGAAACATCTGCTAAGTCCAGA");
    //seq.push_back("GCGCACACACTACACCTGACTTCTGCATCTTTAGAATACTCCTGCATAGTGCTTACACACATCACCACGGATTAGAACATCGAAGCCGGCAGACGGGGTA");
    //seq.push_back("ATATTGTATATAGTAAACTGGTATAGCGCATCTTCTCATAAGCTCCTGTGACCCACTCAACTGCGTATTTTACATGGGACCCGGGTACAAGGTATCTTAG");
    //seq.push_back("GTGTACCGAGTCTCTCATGCTATGAGTTCTGTTAGTGTCGCATACGCGGATCAGACATACTGAGTGCCCGTTGGTTACCGCAACGAGGTTTGCTAACCCT");
    //seq.push_back("TAGCGCCTGGCTTCCCCTACGTTATAAACGTCGCGCTTACGCCCTGGACGCAGCACCACGGCTCGGGCCGTTTAAGGTTTCATTCTAGAGCGTATCGCTA");
    //seq.push_back("TGTTGACATATACTAGGACGGGCCGATCGGCCAAAGAGGTGCATAAGTATCTCGATTTACCCGCGTTGCCGTTGTTGCGGAACCGGACCCGTGCAAAATC");
    //seq.push_back("ATGCACCGTTTAGTCTTTGCAGGACAGCACAACGGCTTTTGGTCGAACTGTAACACGTGGAGTCCCGAACTTATAGTATTTGTTATCGGTATGTATATTC");
    //seq.push_back("GTCACGCGCTGGAAGATCCGGTCACATGAAAGTCTATAGATAGTCCTAGCGAATACAATAATGAACATCTAATGTATTAGAGGAGTCGTCGTAATCGAAT");
    //seq.push_back("TAAGTTTGGTAGGTGAGAGCCAACAAGGATGTTGCGCACAACGGACGGCATGAATAAGTACCTATATACAACCTTGACACCATCAGCAAAACCTGATCCA");
    //seq.push_back("CCCGAAAACCCGCATCTCCTCCCTATTTAAACGCTGGATTCAGGCCTAGATACATCTGATTAACGATAAGTCTCTATGACGTCTAAATTATGCTTTTGTT");
    //seq.push_back("CGAAATATCAATTGGTGGTCTGTACGTCCGAGACGAAGTGGACCGACAGAGCGCCTAAACGCTTGCTGTTACTGGCGTCATTGCCTCCACGGGCCAGCTC");
    //seq.push_back("ATGTCAATACATCGCGCGTCTCAGGCGAGCCGCTCGTCGTTGTAAAGCGCTCGTTAAGATTCCAATTTACTTTGTTGCAAGTCAGCATTAGGCTTCGGCT");
    //seq.push_back("TAGGGGCATCAGCCGTGTGCTAACATGGCTCATAGCGTCCACTCTGCCCTTAATCAGAGTTATTACAGAGTATTGGCTAGGTGGGAGAACTTCGGCTTTT");
    //seq.push_back("CGTACCTGATATGTCATAATCTGGCCTAAGTCAGCGAAAATCTCACCTCCGGAAACCTCCCAGCTATTAATACTCCATACAGTCGTGAGACTAAATAAGA");
    //seq.push_back("AGACCGGCCGGCACGGACGGCACCACCACTACCCGGTATAGCCGGACGCTAGTCTTTATAAAGCCAAACTATCCGTCTGGGGAGAACTACTACCGGGGGT");
    //seq.push_back("CGGGTAGCTATGGAAGACCAGCCTGTCACTTGCGCCGTGGTCACCAACCCGAGTTCGCCTACCGTGTCCCTAGTGATGCCTTCGGATACATGCCAATTGC");
    //seq.push_back("ACCGCTGACACCTGTGTGGAGGGATGAGCGTCACACAGCGGTTGCGAAAGCGATGTGTGTCCCCGCGTTACGTAAAGACGGGATCTGTGATTGACACTTA");
    //seq.push_back("TAGGAGTGGAACGCATAGTGTGCCGGCTGCTCCGAGATATTCACGAAGGTACCCGTAAGGCGTGATAAGCTCGTGATTGGGGTATGTTGGCTACCAAGAT");
    //seq.push_back("TAACTTCTGTCACAAAGAAAGCTGGCGTTGGGGGTGCACTTGAAGAACAACGGCAAGGTCCCTTAGCCGGCCACCTCCAGGCAAGCAATACACAACGCTA");
    //seq.push_back("AACACGTGATAGCCGTGGACGCGAGGCATACTAGACCTACTATACCTTTTCGCTGTCTTAAAAATAGATGCGGAGACGTACAGGTACAACCACCAACGAA");
    //seq.push_back("CTAACACTAGATGAATCAGTGGAATAAGAAGGTGGATTTTCAGAAGTCTCACTAGGCGACGTTCCCCAACAGCGGCCCGAGGCGTTAACCCTACACGGGT");
    //seq.push_back("TGCAATCCATCGCTAAGCAAGGTGTATCGCACTCCAAGCACTTGGTTAATAGCAAAAAGGCGTCAACAGGCTCACTTAAAAAGCATGATAGAGCCGCGTT");
    //seq.push_back("CAGGAAGTAGTAGGGTCATAAGAGTGCCAAACATAATGTTATAGCGCGGCGGTGAGACTCCAGCTGCGACCAACTCTATCCCTATATACGCTGTACGGTG");
    //seq.push_back("TCTTGGAGGTTAATATTTTAGATAAAGGGCACGTACCATATGATCAGAAGCGGAGGAAAGGCTAATCGTAGGTGCAGACGGGAAGTTTTTCCACGCATTA");
    //seq.push_back("ACAATTAAGGAGTAAGTTGGCCTCCAGTAATACTCAGCACTATGCAAATGGATCCACTTCTTGAGTCCACGTGCGTCGTACCAAGGCTCACCTTCGGGTG");
    //seq.push_back("ACCGGTCAGAATCCTTTAGACTCAGTGACCGCGATCTACCACACGAACATGCGTGCGACAGACAACCTCGCGACTGCAAGTGTCCCGAGAAAACAAGGTA");
    //seq.push_back("AAGAGCTTCTCACCGGGAGAAGAAACAGTAGTAAAGGTGTGTATAGCTGATTGATGCACAATTAATTGGCCAACTCTCAGCTCTTAGAATAAGACGTAAG");
    //seq.push_back("CGGCTGGTTGCAGGTCGCGTAGTTGACGAGACAGTTACGTATTGCTTAACTCAGAGTCATTACTTATTCCTCCGTGCTGGACTAATTTATGAATTTTGGC");
    //seq.push_back("ACGCAGTCCGTCTGGTCCGGACGAACTAAGCATTCTCACGGAAGTGCATAGTCAACGTCGCGGCGTATTCGGGGACACCTCAGGAGAGGCATAGAGCCCC");
    //seq.push_back("GTTACTCCATAGTTATCAGTGGTGCTAGACTTCGTGCCAGAAATTAGCCAATTTCATCGTGGGTAGGGTGATGAGGAATCCTAATCAGGGCCAAACGGTC");
    //seq.push_back("GTCATAATGCACGGTACCGATTGTTTGCCGCACTAATATCCTTTGGTTTGAGCGGACACTGTTTGTTCTGGAGCAATTTGCTCGCTTTTAGCTCACATGT");
    //seq.push_back("CCTTGTTGTTAAGCTAAGTTGCAGGATGTGCCTAACAATTTATCCGCGAACTCGCTGACGGGTCTTTTTGGGGCAAACGAGTTTCATACAGTTCCGAACA");
    //seq.push_back("GTGCAGCAATCGGACACAAGCGCATGGTGTTCGGGGATTAGAGAAAACAATCGCCCTTCGGATAGCTTAGTGGGGGGTAGTTAGACTACAGTCCATGTGG");
    //seq.push_back("ATTTTTCGAAGTCGTCGGTCAAAGATCTAACAACATACCAGATTGTAACTCCTGTTCAGGCAGCCGACACCGCCCTACTCACGATCTACGGGGCTTTTAT");
    //seq.push_back("CCCGGGGGTCTAGCACGTGACAGTCGGCCGAGAGCGATCAAAATGAAATGACTTAACTCGCGCCAGAACCACCAATACAATACGTCTAAATGGATGGTTT");
    //seq.push_back("ATAGACCAGCACGCACTTGTTCCGCCATATGCTGTTTATCGATACTCAGTACACTCGAATTGAGCTCATCGCCCCGATTGGTTTATATTCGGTGCACGCA");
    //seq.push_back("TTGAATTAGGGCCCACAAATCGGCATCCCGGCCACCTACGGTTTCTCCTCCCATGAGTGTGAATAGCTGGCCGAATTCATTCATAGTGCCGTCGTCAACT");
    //seq.push_back("GGAATATGGACCCCAGTTACCGAGCTACTCAGTAGGCGCTGGATAACTTGAAACTCATTAATGTAAGCGTAACAACACCTTCAAGTCTGATGACCACTCA");
    //seq.push_back("GCAACACCGGACAACGTTCCTATTCCTTAATTCTTGAATGTATTACCAATCTTCTCGGAGTTCAGATGCGAAGATTCATCTAATCTATGAGCTTCCAAAC");
    //seq.push_back("ACTGCCGCCTGCTGCCGATTGAAGATTGTATAGTGTAAACTGTGAAAGATCGACCAAAGACGATCGGCGGGCACAACAGGTAATCCAGGGGTAGGCAAGG");
    //seq.push_back("AAGTGCTTACATTGACATGTAGGCGTAATCCTCAGTCGGGTGCGCGTCCGAGATTGGTGGAACCAACCGTTCGCATTTAACAGGTGAGCTAGTCTTCAAT");
    //seq.push_back("AACGCCCAACAGCTACCATGTTAGAACGAGCAGGGTTTTAATGGGGTTGGGGCGACGGTTACTGTGCTCATGTCAGTTCCCTTGGATAGTTGATATCCGG");
    //seq.push_back("CCAAGAGCTATATGGCGGGACCGCAGACTTAAAACTCTAATTCTGTAACGCGATTAGAGCTGGTGTGTGTAGGCCAACCGAGAACAATAGCTATGTGCGA");
    //seq.push_back("AGGGTTTACAGCGGCTGCTGAACATATCCGCCAATATGAAGGCAAGATATCATTAGTATAGACGAAGATGACAGGCAGAACCAAACGTCCTTCACGCAGA");
    //seq.push_back("GGCTATACCACGCGGGTACACCTTCACGATGTCAGGTGTCGATTGGCCGTCAAATCCAACTGAAGGGGACTGGGGAATGTGTTGAGACGAGCGTCCCATG");
    //seq.push_back("CGATAGACGGAACTTCCTGTTCACACGCCCTTTAGAGGCAACCGAATCTGAGTATTCGATTAGTAATGTATTCACCACGTTGCGGACTGCGGCACCCAAA");
    //seq.push_back("CAATCTAAATCGGGACCACTGTAAACTGTCCAGCTTAAAATCTGTTTAACTGAAGCCCTATCACGTATTATTGGCCGAGGCCAGCGTGAGGTTGAGGACC");
    //seq.push_back("CAATTCACGGTTATCCCAACTGAGCAATCCAGGCCCGCGAACAAACCCGCTCATTCAAACCATTCAAACGACTACTGTCAAACATACTACAGGTCTTGTC");
    //seq.push_back("AAGAAATGTAGTATAAACTATAGCTAATGAAGAGGAGGTCGCCTCCTCGGCCGAGGATCGTCATTTTGCGTTAAGCCCGAATCGTAATTCCGGGCGCAAG");
    //seq.push_back("TTCTAAACCGCCCTACTAAGGGAAACGCCGTAGATGATTGCCTTATATAACGGCGGGCTTTGACTTTTTTCAACTAATTAAAGGCCCTGAGCTGTGGGCC");
    //seq.push_back("CTCTCTTGCTGACCTCATGTCGCATCGGCTCGGGCTCCCGATGGCCTCCGAGACGTTACAAGGGAAGGCTACTTTAATCCCCTCGCACGCCGTAATAGCC");
    //seq.push_back("GGGCCGCCCGTGTGTCATTGAAATAAGATACCGAGTGTATCTCAGACGTAATCAGCAAGTATAGTGCCCGAGCCGTCACAACTCCCTGGCCGAGCAAGCG");
    //seq.push_back("AGAGTTCCTTCTACCGGAAACCTCTACAGTGTCGCACGCACTAGACAGCATGCGTCGCCAATTCCACTTTTAGTGGAGACGTTACTCTAGAACTCGAGCT");
    //seq.push_back("CCTTAGCCAGGTCGTTCAGCGGCTGGCGATCGAACAGTCTCAGGGCCTCAATGCGATTGTGTCGATTGGACTATCGATCCTCACGGGCGACAAGTACGGT");
    //seq.push_back("GAGTTACATTCGAGTTACAGGCTGAGGCAACGATCATTAGGCAGTACACGGTTCCTTTCTAGGACTACGATAGATCAACCGACGCGCCGGAGAGGGGTTA");
    //seq.push_back("TGCCGATGAAATACCGTGTCCTTCGGTACGAACCGTCCGGCGCGTGAGATACGTTACGAGCCTGGCCAGTGTCTCACCTCATTTGGTAAAGCCCTTGCTA");
    //seq.push_back("ACAGACGCTCTTAGGTAGTAGCGTTCGCGGGTTGCATTCGCAGCGAAGGTTACCTAGGCCATATCCTCACTCCCTAGTGATCCAGAACGCGGCGGGTCTT");
    //seq.push_back("GTCAAAAGTGTGAAGGAGTTACCCTTTGCTGTGTTGTTCGGACGATAAGATGCCTCAGTCCCCTAAGTATGGTTATGATAATGGACTAAGGCATCATTAT");
    //seq.push_back("CTACTAATCGCGATATATGGGCACCCAGACCGACTACTTGCAAGTACATTGCCGTGATCACGGCTCCAAAGGAGAAGCACCGGGCCACCCCGTATGCCGG");
    //seq.push_back("CAAGGAGACGCGAAACCCGGGAAGAAACCTTGTTAGTGGCAATCAAGCCCATCACCAGGCCGAACAGCTCGTCCACCTGGAGGCTTGTCACGGCTACCCA");
    //seq.push_back("GCTTGTAGCTTAGCGTCAGCCAATTAACTGACATAGGAATTTTCCCCGGTTTTAGGATATCACCTCACGAACATTCAATGTGCGGAAGTAGAATGTAGAG");
    //seq.push_back("GAAGTTTATGGGCAATAAGTCATCTCCTTCGGGGACCACAGAGTAGTAGCTTCGCAAGTTTCCCTGTAGAAAAGAAATATATGCGTCGCACCGTGCCCGT");
    //seq.push_back("ATACATCAGGTACTCTTGGGGCACCGGCCTCCGCGGATGGCGGTCAGAGATACTCTCTAGGGTCTCTAAGGGACCCCTGTTCTCAAAGTAACGAGGCGGG");
    //seq.push_back("AAAACCCGATCTAAACAATTCTCTTTCCCTTCATCCATAAGCTTGAAGATGCGTCGGGTAGGCGCTTCGTCACATTATCCGTGCGTTCGGCAAGGCCCGT");
    //seq.push_back("CTAGTTCATGCCGTGATCCCTGCTCTAGAGGCCGTCCACATGGCCACAGTCCCGCGCCCGATTCCTGGTTTGCCTTCCTTACCCTGACTCTTAGCCCTTC");
    //seq.push_back("TGTATTTCATAAACCTTCATGTGGGTTTTTAGCAGCTGGTCGTCAAATGCGAACTGAGGTCGCTGAACGGATATAAAAAGCGGGTCAAAGTCCCATCACT");
    //seq.push_back("GCGTCGTCGTTAGCGCTGCTCCAGGCCTCGGAAATCGGGAGCAAGGCCCTAGACAGGCCTATTATGCCCTCTAGTGAAACTATTCTCTCGTCCGCACGCG");
    //seq.push_back("CTCCCATCATTAAGTCGCCTTAACGCCTTTCAGGCTGAATATTAGGCATGTTGTACACATAGTGAACTAGGACCATTGTTAGGTCGACTAAAGTGTTAGA");
    //seq.push_back("GAATCCTATGTTCCGGTGATTATCACATCGTTGATTCGAAATTCCGAAAATTAGCAACACATCGTAGAGGAGCAAGGATGAGGACTCCACGAATTATCAC");
    //seq.push_back("TCAACATTAGCAATACGCGTGCTTAGTATTCGACTCCGACAGCACGGATATGCGCGCAGATTTACGCGAGAAACACTGCTTACATGGAGAACATCCCTTC");
    //seq.push_back("CTCCCGGAAATTAAATGGTATAGTTTACGTGTTAAAGTAGTAGTAGTTAGTTGCGGCGTTGCTCCTCTGCGCCACGGACGGAGCGATTTGGCTCGCCTAT");
    //seq.push_back("AGCGGGAAGCTACCCTCAGAGCCGGTTTGTTTGACAGCCAGAATCGTGGCTCGATCAGAGCTCTTGACTCCCCGCGAAAGCTTAAGCAACGGCACAGCGG");
    //seq.push_back("GTTTCACCAGAGCTGCGTCGAAACAGGGTAAGTACCATGCCGTGGCAAACGACTGCCAAAAAGTAAACTTGACCGTGGTGAGGCCATGATGATCAACACA");
    //seq.push_back("TTACAGAGCAACGGGTTCCTATAAAAACACCAACCAACGCCGGTAAGTGTTGTTGTTGCTTGTTAATAGCCTTTTATCTCCGAACGTACAAATTATATTG");
    //seq.push_back("TTTCCGCGGCGGCATACCGGAAAGCTGGCCGACCCGTTACATTCTGCATAGTATCCGATTCCTGGAAGTCTAATCTCTTCTCATAGAGGTCTCAGTCGCA");
    //seq.push_back("TCATAGGCCCGATTTTCTGTGTGTAATCTACGCGGCAATCGCCCAAACTGACGTCGTATGAACGGTTGTGTCAAGAATGTCGCTCGCCGATGCAATTAGT");
    //seq.push_back("TTGCTCCTACAAATTGGTTGCTATATACAGTTCCAATCTTTTTTGGCACATGATCAGGCGAACCGCGCTCAGCTCTCGAGTTATGGTAACTACACTGTAC");
    //seq.push_back("CATGTACAGCGCATAGCATCCGCGGGGAGGCTTACGAGTTACAAACTCCGGGATAGGGTACATACAGCGCAGTCTTGGCTATCATCGCACCCGACTATAG");
    //seq.push_back("CCCAGATAGATGAAGTCAACGCGACTTCTTTAAAAGATGGACAACGTTTTACATCCGAGCTCCAGCGGCCCCGCCAAATTTTATGCACCGGATAACCTAG");
    //seq.push_back("AAGTCGCTAACCATAAGACTCGATAGATATCAAATCGCAGCCTCATCTTGGACGACCAACAGCAGACACCGTGCAGAGCTAATCGTGTATAACCATGCTT");
    //seq.push_back("GCGAGTGGCACCAATGACGAAGACAAAGCTCTAATGTCAACCCCGAAGGGGGAGAAGAGTAAGAACTTGTTACACTCCCTTTCACCATGTGGTAGTCCGT");
    //seq.push_back("CCTGCCCGGGCGCTGGAGCGCTAATTTAACTCGTTAAAGGGAATTGCTCGGGCGTACGAGAATGTTGTTCCGCGCAATTCCCATATTCCATCATATGGGC");
    //seq.push_back("TTTACCAGAATCCTACGATAAGCACCTTACCTAAAGCAACATTGTTTCTGCTCTTGAGGATTAATAGCAGGCCCTACGGACTAGGTATGGTCCTCCTTGA");
    //seq.push_back("TATAGTATCGAAAATGACTCGCCTACGTTACGACGGATCCCCCCGAAGCTTAAATAGCTCGATGCCCCAGGGAATGATAGGTGGACGGGCTAGGTTTACA");
    //seq.push_back("GTGGTCAACAGTAAGACAGTGCAATTTGTAGCAAATGATTCCGCCACGCTGTAGTTCGCATACTACGGGGCTTAACACTCACAATTTAGAACAGACTGTC");
    //seq.push_back("ACAACACCCATCGTCCTAGCCGGCAGGAAGCCTGCAGGCAGACAATGTTAAAGGGTAATAGACCGGCCATCTTGTTCCGCCGCAATTAAGCGGGACCCGC");
    //seq.push_back("CACTCATGAGACGTTGTTGGGGGAATCCACTGCCCTCACCGCTCAGTTCCCTTTTTTACTCACTCGGTGTACATGAGCATTCTGCGGATTTATCTCTCAG");
    //seq.push_back("AATAACCGGCCCGAATTGTGCTGAAGCTTCCAGAAGCCAAGCCCGCACTATATCCTTGGTAATGATAGCAGTCTATCCAACTCACGTAACTACGGGGGAT");
    //seq.push_back("GGGACTTGAATCTACAGACGCATTTCCCACAGTGGACGTCGGGCGTGATTGCTCAGTCTTGTCCGACTGACAGTCATTAGGTTGATATAAGGTATCACCG");
    //seq.push_back("GGATTCTGACTTTGGGGTTCCGCTACCGTCCCTCAGTTATCTGACCTTAGCCAGCATGTGTATGGTACGAATTGAATTAACCCCTGGGCCAACTTTGTAA");
    //seq.push_back("ACAAACGGGGATGGAGGAGGAATGTAGAGTCGCCGCTCTCTAACGATCCGTCGGTCGCCAATTCACGTGGACGCGACGCGAATGGGAATCCAAACCCAAA");
    //seq.push_back("TGGCGAATTGTCCATCTCTCTAGATGGTAGTACGCTGCGGTGTAGGCCAATTACTTTCGTTGTAAATGGGACATGGGTTGAGCATAAGCGGAACCAGATA");
    //seq.push_back("GTCGTTACTATTGATGATACGGCGAGTGTGGCCTAATACGAACTAACAACCGATAACTGACAGTTGTGGCATCCGGGTGGAAAATAAAAGCCGTAGCAAT");
    //seq.push_back("AAGGTGCTACTCCCCATGCGCTGTGCTCGTCGTTAGGCGGTCTAGAACGCATCGTTTGACCCTCCTTTCCCAGAAAAAGGGGGTACGATGCCTCGAACTC");
    //seq.push_back("TACCACGAGATAGCTGGCGCTAGGCATCGGTCTAGTGAAAATAGATCGATTTTGCAGAGATCCGCACTACTCATTAGAGGAGCTATAGTGTGTAAAAGAC");
    //seq.push_back("TTGATCACGTAGCCCCACTATGGGTTTTCTAAGGACACTGATACACGCTCCGATCTGAGTTTACCATCCGTCCTGCCAGAGTGGTTCCTTCGGCAACTCT");
    //seq.push_back("CCAGATTCTGCCCATATAGTATCGACGCAAACCCTCATTTCACGAATACCTCAATAGGCGGGATTTATGTGTATGAACACGTGGACGGTTACCAAAACTG");
    //seq.push_back("AGGACACCCCGTCACCGTTCGTTAATAAAAGCGACTAGCCATACACGGACTTAGTAGTAGTTTCTCCATGCTCGACTGTATTTACGATCCGCACGTGTTG");
    //seq.push_back("CCCTTGAGAAGATCAATAACCGGCTACGAAACCCAATCTACCAATAAGAATGGCTGGAAGCATGCATCCGCGTCGGCGCCTATCGTTATTGATCTCCGGG");
    //seq.push_back("ATATAGGCCTGATGCCCCCAATCACACGGTCGGCCGATTCGCCGTGTATCCAAGACGCAAACGGGTAGTTTCAATATTAGACGATGGCTGCTTTCCTCAG");
    //seq.push_back("GCTCACTTGGCACCGCACCGAGGCACTCTCCCGAGGGCCAAGACTTTAAAGAGACGGAACCCTTGCGATTATGAACTTCTAATGACCGCCATGTGAAAAT");
    //seq.push_back("AAGGCTTAGCAGCTCCAGAGTACCTTGTAGTATCGAACATGACTAGCAACGTCTCATTTTCGTAACAAGCTCCCACTCGAGATTAATTTTGCCCCCGGGA");
    //seq.push_back("TCCAGGGGTAGGACCAGCTCACGCGATAGCCCGGCCATTATCGAGTAAAAGACAGAACAGGCTAACCAAAAACGAAGAAGAGTGTCGTGGGAACAAGGAT");
    //seq.push_back("ACGCTCTCCGAGAAGAAGCAATTACAAGAGGATAGGGCATTACACAACGCCGCAGGCTACCGGCTATCCTAAAGACGCGAGAGTACGCAGTCCCGACGCG");
    //seq.push_back("CCGCTTGCACCGCAGCCATCGGGTTCTATAGAGAGCTATTCAGGAAACATGGCCGAGCACGGCAGTCGAACCCTACTATTTCGAGAAACACTGTTAGCGG");
    //seq.push_back("CAAGTAATATGTAATTATTGTCCCACCGGACTACGTCGGCCCACCTAGGAACCCGCGTTATAATCGTGACTCGTGAGTGATGCATTCGTAGGCGGGACCA");
    //seq.push_back("GACCAACGTTTGCAGAATGTTCCATTTAAAATAGAAGCTCAGTCGCCGAACTCTAAGTATTCGTTGACTTGTCCATGCGGCTCGGCTCATATAGTTATAT");
    //seq.push_back("GGGTTGGCTATCACTGGGTTGTGGCCGCAGAGCGCAAAGAACCAGATCTGACGGTTACCAACTCAACAATACCCCTGAACTAGCTCATTCTTTGATTCTT");
    //seq.push_back("TCATTGCACACATCGGATTACCACGCTGGGCCTCATTCTACACCCTTCGGCTTGCCTATCGAGGCGCCTACCAGGCCCGTTATGGATCAGGGGAATGCAC");
    //seq.push_back("CGGCAAGGCCCACAGTACAATGTCGTCACCCGTAAAAGGGTTGAACTAGTCGCATTTATAGCTCCTCCCTTCTGCTTCTCAATGATCATCACGTTTGAAA");
    //seq.push_back("AGGGTAGGTCTAGCACAACCCCGCGCGCGTTGGGCCGTACATGTAGACGCGTTCCCGTGCGGTAAAGGAGAACGTCATGGCCCAGGCACACAGCAGCGAC");
    //seq.push_back("GATAATGGCCTTGGTTCCAGCATGGTACCGGATCATATCCACCGTACACCTGGGAACCCGTTGGATCAGTGGATATTCACTTTCCACGCTAAGTTTGATA");
    //seq.push_back("TCGTAGTATTCGGATTACCCACGGACCGCCGCGAATGTTGGAAAAATCCAGCGATGCCCTGTAAAATGAGAGGCTTCGAGTGTCTGTATATCATGAACGA");
    //seq.push_back("ATGGACCCACTTAGATATTAATCAGTAGCGGCCCTCGCGGGCCGTCCACCACACCGCCCGTTTCAGGTTCCGGTAGAGGCTGGTTTCAAGGAGCCGATCT");
    //seq.push_back("GGGGGCATAGCAGCCATTGTTTTTAATGCCCTTTCGCCCCTGGGTTGTGAGCTCATCACTCGGAGAGTCAACGGTGCCCTCTCAACAGCCCGATTGTCCC");
    //seq.push_back("CCGAACGCGTCTGGTGTTACCCTCCGTAAACCCTCCATTGGACAGCTCATGCCGGGACGACAGTTTAATTGCTAGCCCTCACTCTCTATGAAGGTCGACC");
  }
 
  string flowString;
  vector<weight_vec_t> concentration;
  weight_vec_t cf;
  weight_vec_t ie;
  weight_vec_t dr;
  DroopType droopType;
  unsigned int nFlow;
  unsigned int maxAdvances;
  unsigned int nIterations;
  bool debugBasecall;
  vector<string> seq;
};
 

// Confirm that we can perfectly recover bases for noiseless simulated data
TEST_F(PhaseSolveTest, PhaseSolveWithoutScaling) {

  vector<weight_vec_t> hpWeight;
  weight_vec_t droopWeight;
  bool returnIntermediates=false;

  for(unsigned int iRead=0; iRead < seq.size(); iRead++) {
    //cout << "sim " << iRead+1 << endl;
    // Simulate some data to fit
    weight_vec_t signal;
    PhaseSim pSim;
    pSim.simulate(
      flowString,
      seq[iRead],
      concentration,
      cf,
      ie,
      dr,
      nFlow,
      signal,
      hpWeight,
      droopWeight,
      returnIntermediates,
      droopType,
      maxAdvances
    );
    // Determine the number of positive flows
    hpLen_vec_t & seqFlow = pSim.getSeqFlow();
    unsigned int nPositiveFlow = seqFlow.size();

    PhaseSolve pSolve;
    pSolve.SetResidualScale(false);
    pSolve.setPhaseParam(flowString,maxAdvances,concentration,cf,ie,dr,ONLY_WHEN_INCORPORATING);
    pSolve.GreedyBaseCall(signal,nIterations,debugBasecall);
    string resultSeq;
    pSolve.getSeq(resultSeq);
    ASSERT_EQ(seq[iRead],resultSeq);
    weight_vec_t & resultPredicted = pSolve.GetPredictedSignal();
    weight_vec_t & resultResidual  = pSolve.GetResidualSignal();
    for(unsigned int iFlow=0; iFlow < std::min(nPositiveFlow,nFlow); iFlow++) {
      ASSERT_NEAR(signal[iFlow],resultPredicted[iFlow],1e-6);
      ASSERT_NEAR(0,            resultResidual[iFlow], 1e-6);
    }
  }
}

// Confirm that we can perfectly recover bases for noiseless simulated data
TEST_F(PhaseSolveTest, PhaseSolveWithScaling) {

  vector<weight_vec_t> hpWeight;
  weight_vec_t droopWeight;
  bool returnIntermediates=false;

  for(unsigned int iRead=0; iRead < seq.size(); iRead++) {
    // cout << "sim " << iRead+1 << endl;
    // Simulate some data to fit
    weight_vec_t signal;
    PhaseSim pSim;
    pSim.simulate(
      flowString,
      seq[iRead],
      concentration,
      cf,
      ie,
      dr,
      nFlow,
      signal,
      hpWeight,
      droopWeight,
      returnIntermediates,
      droopType,
      maxAdvances
    );

    PhaseSolve pSolve;
    pSolve.setPhaseParam(flowString,maxAdvances,concentration,cf,ie,dr,ONLY_WHEN_INCORPORATING);
    pSolve.GreedyBaseCall(signal,nIterations,debugBasecall);
    string resultSeq;
    pSolve.getSeq(resultSeq);
    ASSERT_EQ(seq[iRead],resultSeq);
    weight_vec_t & resultPredicted = pSolve.GetPredictedSignal();
    weight_vec_t & resultResidual  = pSolve.GetResidualSignal();
    unsigned int endFlow = pSim.getSeqFlow().size();  // we only want to test out as far as where the solver bails
    for(unsigned int iFlow=0; iFlow < endFlow; iFlow++) {
      ASSERT_NEAR(signal[iFlow],resultPredicted[iFlow],0.2);
      ASSERT_NEAR(0,            resultResidual[iFlow], 0.2);
    }
  }
}
