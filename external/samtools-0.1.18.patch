Index: bam.h
===================================================================
--- bam.h	(revision 1011)
+++ bam.h	(working copy)
@@ -548,6 +548,7 @@
 	bam_mplp_t bam_mplp_init(int n, bam_plp_auto_f func, void **data);
 	void bam_mplp_destroy(bam_mplp_t iter);
 	void bam_mplp_set_maxcnt(bam_mplp_t iter, int maxcnt);
+	void bam_mplp_set_mask(bam_mplp_t iter, int mask);
 	int bam_mplp_auto(bam_mplp_t iter, int *_tid, int *_pos, int *n_plp, const bam_pileup1_t **plp);
 
 	/*! @typedef
Index: bam_pileup.c
===================================================================
--- bam_pileup.c	(revision 1011)
+++ bam_pileup.c	(working copy)
@@ -404,6 +404,12 @@
 		iter->iter[i]->maxcnt = maxcnt;
 }
 
+void bam_mplp_set_mask(bam_mplp_t iter, int mask)
+{
+        int i;
+        for (i = 0; i < iter->n; ++i)
+            iter->iter[i]->flag_mask = mask;
+}
 void bam_mplp_destroy(bam_mplp_t iter)
 {
 	int i;
Index: bam2depth.c
===================================================================
--- bam2depth.c	(revision 1011)
+++ bam2depth.c	(working copy)
@@ -14,6 +14,8 @@
 	bamFile fp;      // the file handler
 	bam_iter_t iter; // NULL if a region not specified
 	int min_mapQ;    // mapQ filter
+        int flag_on;
+        int flag_off;
 } aux_t;
 
 void *bed_read(const char *fn); // read a BED or position list file
@@ -25,7 +27,7 @@
 {
 	aux_t *aux = (aux_t*)data; // data in fact is a pointer to an auxiliary structure
 	int ret = aux->iter? bam_iter_read(aux->fp, aux->iter, b) : bam_read1(aux->fp, b);
-	if ((int)b->core.qual < aux->min_mapQ) b->core.flag |= BAM_FUNMAP;
+	if (((int)b->core.qual < aux->min_mapQ) || ((b->core.flag & aux->flag_on) != aux->flag_on) || (b->core.flag & aux->flag_off)) b->core.flag |= BAM_FUNMAP;
 	return ret;
 }
 
@@ -35,7 +37,7 @@
 int main_depth(int argc, char *argv[])
 #endif
 {
-	int i, n, tid, beg, end, pos, *n_plp, baseQ = 0, mapQ = 0;
+	int i, n, tid, beg, end, pos, mask, *n_plp, baseQ = 0, mapQ = 0, flag_on = 0, flag_off = 1796;
 	const bam_pileup1_t **plp;
 	char *reg = 0; // specified region
 	void *bed = 0; // BED data structure
@@ -44,16 +46,25 @@
 	bam_mplp_t mplp;
 
 	// parse the command line
-	while ((n = getopt(argc, argv, "r:b:q:Q:")) >= 0) {
+	while ((n = getopt(argc, argv, "r:b:q:Q:f:F:")) >= 0) {
 		switch (n) {
 			case 'r': reg = strdup(optarg); break;   // parsing a region requires a BAM header
 			case 'b': bed = bed_read(optarg); break; // BED or position list file can be parsed now
 			case 'q': baseQ = atoi(optarg); break;   // base quality threshold
 			case 'Q': mapQ = atoi(optarg); break;    // mapping quality threshold
+			case 'f': flag_on = strtol(optarg,0,0); break;   // flag to include reads in calculating depth
+			case 'F': flag_off = strtol(optarg,0,0); break;   // flag to exclude reads in calculating depth
 		}
 	}
 	if (optind == argc) {
-		fprintf(stderr, "Usage: bam2depth [-r reg] [-q baseQthres] [-Q mapQthres] [-b in.bed] <in1.bam> [...]\n");
+		fprintf(stderr, "Usage: bam2depth [-r reg] [-q baseQthres] [-Q mapQthres] [-b in.bed] [-f include flag] [-F exclude flag]<in1.bam> [...]\n");
+		fprintf(stderr, "Notes: \n\                                                                                           
+\n\                                                                                                                                   
+By default the depth command excludes reads that are duplicates, failed platform QC, secondary mapping and unmapped reads\n\          
+This can be reset using the -F flag. The -f and -F flags can be used to include/exclude reads as necessary. e.g. depth -f 0x10 in.bam\n\
+will generate coverage on the reverse strand. The default maximum coverage depth is set to 1,000,000. The default setting\n\
+using mpileup is 8000. \n\                               
+\n");
 		return 1;
 	}
 
@@ -64,8 +75,10 @@
 	for (i = 0; i < n; ++i) {
 		bam_header_t *htmp;
 		data[i] = calloc(1, sizeof(aux_t));
-		data[i]->fp = bam_open(argv[optind+i], "r"); // open BAM
+		data[i]->fp = strcmp(argv[optind+i],"-") == 0? bam_dopen(fileno(stdin),"r") :bam_open(argv[optind+i], "r"); // open BAM
 		data[i]->min_mapQ = mapQ;                    // set the mapQ filter
+		data[i]->flag_on = flag_on;                    // set the reads to include 
+		data[i]->flag_off = flag_off;                    // set the reads to exclude 
 		htmp = bam_header_read(data[i]->fp);         // read the BAM header
 		if (i == 0) {
 			h = htmp; // keep the header of the 1st BAM
@@ -80,6 +93,9 @@
 
 	// the core multi-pileup loop
 	mplp = bam_mplp_init(n, read_bam, (void**)data); // initialization
+        bam_mplp_set_maxcnt(mplp,1000000); // set maxdepth to 1M
+        mask = flag_off; // Default mask = (BAM_FUNMAP|BAM_FSECONDARY|BAM_FQCFAIL|BAM_FDUP)
+        bam_mplp_set_mask(mplp,mask);
 	n_plp = calloc(n, sizeof(int)); // n_plp[i] is the number of covering reads from the i-th BAM
 	plp = calloc(n, sizeof(void*)); // plp[i] points to the array of covering reads (internal in mplp)
 	while (bam_mplp_auto(mplp, &tid, &pos, n_plp, plp) > 0) { // come to the next covered position
