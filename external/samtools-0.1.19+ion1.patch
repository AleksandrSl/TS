diff -rupN samtools-0.1.19.orig/bam2depth.c samtools-0.1.19/bam2depth.c
--- samtools-0.1.19.orig/bam2depth.c	2013-03-19 03:48:09.000000000 -0400
+++ samtools-0.1.19/bam2depth.c	2013-08-29 09:42:33.934346953 -0400
@@ -14,6 +14,8 @@ typedef struct {     // auxiliary data s
 	bamFile fp;      // the file handler
 	bam_iter_t iter; // NULL if a region not specified
 	int min_mapQ, min_len; // mapQ filter; length filter
+	int flag_on;
+	int flag_off;
 } aux_t;
 
 void *bed_read(const char *fn); // read a BED or position list file
@@ -26,7 +28,7 @@ static int read_bam(void *data, bam1_t *
 	aux_t *aux = (aux_t*)data; // data in fact is a pointer to an auxiliary structure
 	int ret = aux->iter? bam_iter_read(aux->fp, aux->iter, b) : bam_read1(aux->fp, b);
 	if (!(b->core.flag&BAM_FUNMAP)) {
-		if ((int)b->core.qual < aux->min_mapQ) b->core.flag |= BAM_FUNMAP;
+		if (((int)b->core.qual < aux->min_mapQ) || ((b->core.flag & aux->flag_on) != aux->flag_on) || (b->core.flag & aux->flag_off)) b->core.flag |= BAM_FUNMAP;
 		else if (aux->min_len && bam_cigar2qlen(&b->core, bam1_cigar(b)) < aux->min_len) b->core.flag |= BAM_FUNMAP;
 	}
 	return ret;
@@ -40,7 +42,7 @@ int main(int argc, char *argv[])
 int main_depth(int argc, char *argv[])
 #endif
 {
-	int i, n, tid, beg, end, pos, *n_plp, baseQ = 0, mapQ = 0, min_len = 0, nfiles;
+	int i, n, tid, beg, end, pos, mask, *n_plp, baseQ = 0, mapQ = 0, min_len = 0, nfiles, flag_on = 0, flag_off = 1796, max_depth = -1;
 	const bam_pileup1_t **plp;
 	char *reg = 0; // specified region
 	void *bed = 0; // BED data structure
@@ -50,7 +52,7 @@ int main_depth(int argc, char *argv[])
 	bam_mplp_t mplp;
 
 	// parse the command line
-	while ((n = getopt(argc, argv, "r:b:q:Q:l:f:")) >= 0) {
+	while ((n = getopt(argc, argv, "r:b:q:Q:l:f:g:G:m:")) >= 0) {
 		switch (n) {
 			case 'l': min_len = atoi(optarg); break; // minimum query length
 			case 'r': reg = strdup(optarg); break;   // parsing a region requires a BAM header
@@ -58,6 +60,9 @@ int main_depth(int argc, char *argv[])
 			case 'q': baseQ = atoi(optarg); break;   // base quality threshold
 			case 'Q': mapQ = atoi(optarg); break;    // mapping quality threshold
 			case 'f': file_list = optarg; break;
+			case 'g': flag_on = strtol(optarg,0,0); break;   // flag to include reads in calculating depth
+			case 'G': flag_off = strtol(optarg,0,0); break;   // flag to exclude reads in calculating depth
+			case 'm': max_depth = atoi(optarg); break;  // max depth
 		}
 	}
 	if (optind == argc && !file_list) {
@@ -70,7 +75,17 @@ int main_depth(int argc, char *argv[])
         fprintf(stderr, "   -q <int>            base quality threshold\n");
         fprintf(stderr, "   -Q <int>            mapping quality threshold\n");
         fprintf(stderr, "   -r <chr:from-to>    region\n");
+        fprintf(stderr, "   -g include flag     e.g. 0x10\n");
+        fprintf(stderr, "   -G exclude flag     e.g. 0x10\n");
+        fprintf(stderr, "   -m <int>            max depth\n");
         fprintf(stderr, "\n");
+		fprintf(stderr, "Notes:\n\
+\n\
+By default the depth command excludes reads that are duplicates, failed platform QC, secondary mapping and unmapped reads\n\
+This can be reset using the -G flag. The -g and -G flags can be used to include/exclude reads as necessary. e.g. depth -g 0x10 in.bam\n\
+will generate coverage on the reverse strand. The default maximum coverage depth is set to max int (2,147,483,647). This can be changed using the\n\
+-m flag. The default setting using mpileup is 8000. \n\
+\n");
 		return 1;
 	}
 
@@ -89,8 +104,10 @@ int main_depth(int argc, char *argv[])
 	for (i = 0; i < n; ++i) {
 		bam_header_t *htmp;
 		data[i] = calloc(1, sizeof(aux_t));
-		data[i]->fp = bam_open(argv[optind+i], "r"); // open BAM
+		data[i]->fp = strcmp(argv[optind+i],"-") == 0? bam_dopen(fileno(stdin),"r") :bam_open(argv[optind+i], "r"); // open BAM
 		data[i]->min_mapQ = mapQ;                    // set the mapQ filter
+		data[i]->flag_on = flag_on;                    // set the reads to include
+		data[i]->flag_off = flag_off;                    // set the reads to exclude
 		data[i]->min_len  = min_len;                 // set the qlen filter
 		htmp = bam_header_read(data[i]->fp);         // read the BAM header
 		if (i == 0) {
@@ -106,6 +123,10 @@ int main_depth(int argc, char *argv[])
 
 	// the core multi-pileup loop
 	mplp = bam_mplp_init(n, read_bam, (void**)data); // initialization
+	if (0 < max_depth) bam_mplp_set_maxcnt(mplp,max_depth); // set maximum depth
+	else bam_mplp_set_maxcnt(mplp,2147483647); // set maxdepth to max int
+	mask = flag_off; // Default mask = (BAM_FUNMAP|BAM_FSECONDARY|BAM_FQCFAIL|BAM_FDUP)
+	bam_mplp_set_mask(mplp,mask);
 	n_plp = calloc(n, sizeof(int)); // n_plp[i] is the number of covering reads from the i-th BAM
 	plp = calloc(n, sizeof(void*)); // plp[i] points to the array of covering reads (internal in mplp)
 	while (bam_mplp_auto(mplp, &tid, &pos, n_plp, plp) > 0) { // come to the next covered position
diff -rupN samtools-0.1.19.orig/bam.h samtools-0.1.19/bam.h
--- samtools-0.1.19.orig/bam.h	2013-03-19 03:48:48.000000000 -0400
+++ samtools-0.1.19/bam.h	2013-08-29 09:19:25.162369153 -0400
@@ -549,6 +549,7 @@ extern "C" {
 	bam_mplp_t bam_mplp_init(int n, bam_plp_auto_f func, void **data);
 	void bam_mplp_destroy(bam_mplp_t iter);
 	void bam_mplp_set_maxcnt(bam_mplp_t iter, int maxcnt);
+	void bam_mplp_set_mask(bam_mplp_t iter, int mask);
 	int bam_mplp_auto(bam_mplp_t iter, int *_tid, int *_pos, int *n_plp, const bam_pileup1_t **plp);
 
 	/*! @typedef
diff -rupN samtools-0.1.19.orig/bam_pileup.c samtools-0.1.19/bam_pileup.c
--- samtools-0.1.19.orig/bam_pileup.c	2013-03-19 03:48:09.000000000 -0400
+++ samtools-0.1.19/bam_pileup.c	2013-08-29 09:18:58.958369572 -0400
@@ -404,6 +404,13 @@ void bam_mplp_set_maxcnt(bam_mplp_t iter
 		iter->iter[i]->maxcnt = maxcnt;
 }
 
+void bam_mplp_set_mask(bam_mplp_t iter, int mask)
+{
+        int i;
+        for (i = 0; i < iter->n; ++i)
+            iter->iter[i]->flag_mask = mask;
+}
+
 void bam_mplp_destroy(bam_mplp_t iter)
 {
 	int i;
diff -rupN samtools-0.1.19.orig/bam_sort.c samtools-0.1.19/bam_sort.c
--- samtools-0.1.19.orig/bam_sort.c	2013-03-19 03:48:09.000000000 -0400
+++ samtools-0.1.19/bam_sort.c	2013-08-29 09:44:37.566344978 -0400
@@ -267,7 +267,7 @@ int bam_merge(int argc, char *argv[])
 	int c, is_by_qname = 0, flag = 0, ret = 0, n_threads = 0, level = -1;
 	char *fn_headers = NULL, *reg = 0;
 
-	while ((c = getopt(argc, argv, "h:nru1R:f@:l:")) >= 0) {
+	while ((c = getopt(argc, argv, "h:nru1R:fp:l:")) >= 0) {
 		switch (c) {
 		case 'r': flag |= MERGE_RG; break;
 		case 'f': flag |= MERGE_FORCE; break;
@@ -277,7 +277,7 @@ int bam_merge(int argc, char *argv[])
 		case 'u': flag |= MERGE_UNCOMP; break;
 		case 'R': reg = strdup(optarg); break;
 		case 'l': level = atoi(optarg); break;
-		case '@': n_threads = atoi(optarg); break;
+		case 'p': n_threads = atoi(optarg); break;
 		}
 	}
 	if (optind + 2 >= argc) {
@@ -289,7 +289,7 @@ int bam_merge(int argc, char *argv[])
 		fprintf(stderr, "         -f       overwrite the output BAM if exist\n");
 		fprintf(stderr, "         -1       compress level 1\n");
 		fprintf(stderr, "         -l INT   compression level, from 0 to 9 [-1]\n");
-		fprintf(stderr, "         -@ INT   number of BAM compression threads [0]\n");
+		fprintf(stderr, "         -p INT   number of BAM compression threads [0]\n");
 		fprintf(stderr, "         -R STR   merge file in the specified region STR [all]\n");
 		fprintf(stderr, "         -h FILE  copy the header in FILE to <out.bam> [in1.bam]\n\n");
 		fprintf(stderr, "Note: Samtools' merge does not reconstruct the @RG dictionary in the header. Users\n");
@@ -537,7 +537,7 @@ int bam_sort(int argc, char *argv[])
 {
 	size_t max_mem = 768<<20; // 512MB
 	int c, is_by_qname = 0, is_stdout = 0, n_threads = 0, level = -1, full_path = 0;
-	while ((c = getopt(argc, argv, "fnom:@:l:")) >= 0) {
+	while ((c = getopt(argc, argv, "fnom:p:l:")) >= 0) {
 		switch (c) {
 		case 'f': full_path = 1; break;
 		case 'o': is_stdout = 1; break;
@@ -550,7 +550,7 @@ int bam_sort(int argc, char *argv[])
 				else if (*q == 'g' || *q == 'G') max_mem <<= 30;
 				break;
 			}
-		case '@': n_threads = atoi(optarg); break;
+		case 'p': n_threads = atoi(optarg); break;
 		case 'l': level = atoi(optarg); break;
 		}
 	}
@@ -561,7 +561,7 @@ int bam_sort(int argc, char *argv[])
 		fprintf(stderr, "         -f        use <out.prefix> as full file name instead of prefix\n");
 		fprintf(stderr, "         -o        final output to stdout\n");
 		fprintf(stderr, "         -l INT    compression level, from 0 to 9 [-1]\n");
-		fprintf(stderr, "         -@ INT    number of sorting and compression threads [1]\n");
+		fprintf(stderr, "         -p INT    number of sorting and compression threads [1]\n");
 		fprintf(stderr, "         -m INT    max memory per thread; suffix K/M/G recognized [768M]\n");
 		fprintf(stderr, "\n");
 		return 1;
diff -rupN samtools-0.1.19.orig/CMakeLists.txt samtools-0.1.19/CMakeLists.txt
--- samtools-0.1.19.orig/CMakeLists.txt	1969-12-31 19:00:00.000000000 -0500
+++ samtools-0.1.19/CMakeLists.txt	2013-08-29 10:16:14.330314658 -0400
@@ -0,0 +1,120 @@
+cmake_minimum_required (VERSION 2.6)
+project (samtools) 
+
+OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
+
+add_definitions(-D_FILE_OFFSET_BITS=64 -D_USE_KNETFILE -DMD5SUM_MAIN -D_CURSES_LIB=1  -DBGZF_CACHE )
+
+add_library (bam
+ bgzf.c
+ kstring.c
+ bam_aux.c
+ bam.c
+ bam_import.c
+ sam.c
+ bam_index.c
+ bam_pileup.c
+ bam_lpileup.c
+ bam_md.c
+ razf.c
+ faidx.c
+ bedidx.c
+ knetfile.c
+ bam_sort.c
+ sam_header.c
+ bam_reheader.c
+ kprobaln.c
+ bam_cat.c) 
+
+add_executable (samtools
+ bam_tview.c
+ bam_plcmd.c
+ sam_view.c
+ bam_rmdup.c
+ bam_rmdupse.c
+ bam_mate.c
+ bam_stat.c
+ bam_color.c
+ bamtk.c
+ kaln.c
+ bam2bcf.c
+ bam2bcf_indel.c
+ errmod.c
+ sample.c
+ cut_target.c
+ phase.c
+ bam2depth.c
+ padding.c
+ bedcov.c
+ bamshuf.c
+ bam_tview_curses.c
+ bam_tview_html.c
+)
+
+target_link_libraries (samtools curses bam m z bcf pthread)
+
+
+include_directories("./")
+
+add_library(bcf
+ bcftools/bcf.c
+ bcftools/vcf.c
+ bcftools/bcfutils.c
+ bcftools/prob1.c
+ bcftools/call1.c
+ bcftools/em.c
+ bcftools/kfunc.c
+ bcftools/kmin.c
+ bcftools/index.c
+ bcftools/fet.c
+ bcftools/mut.c
+ bcftools/bcf2qcall.c)
+
+
+add_executable(bcftools
+ bcftools/call1.c
+ bcftools/main.c
+ kstring.c
+ bgzf.c
+ knetfile.c
+ bedidx.c)
+
+target_link_libraries (bcftools bcf m z pthread)
+
+add_executable(md5sum-lite misc/md5.c misc/md5.h)
+set_target_properties(md5sum-lite PROPERTIES
+     COMPILE_FLAGS -DMD5SUM_MAIN)
+
+
+#add_executable(md5fa misc/md5fa.c misc/md5.h kseq.h)
+#target_link_libraries (md5fa z)
+
+
+add_executable(wgsim misc/wgsim.c kseq.h)
+target_link_libraries (wgsim m z)
+
+
+add_executable(maq2sam-short misc/maq2sam.c)
+target_link_libraries (maq2sam-short z)
+
+
+add_executable(maq2sam-long misc/maq2sam.c)
+target_link_libraries (maq2sam-long z)
+set_target_properties(maq2sam-long PROPERTIES
+     COMPILE_FLAGS -DMAQ_LONGREADS)
+
+
+#add_executable(seqtk misc/seqtk.c khash.h kseq.h)
+#target_link_libraries(seqtk m z)
+
+install(TARGETS samtools bcftools DESTINATION bin)
+install(TARGETS bam bcf DESTINATION lib)
+install(
+ FILES
+  bam.h
+  sam.h
+  khash.h
+  faidx.h
+  bgzf.h
+  sam_header.h
+ DESTINATION include)
diff -rupN samtools-0.1.19.orig/Makefile samtools-0.1.19/Makefile
--- samtools-0.1.19.orig/Makefile	2013-03-19 03:48:09.000000000 -0400
+++ samtools-0.1.19/Makefile	2013-08-29 10:17:13.574313712 -0400
@@ -85,6 +85,7 @@ libbam.1.dylib-local:$(LOBJS)
 
 libbam.so.1-local:$(LOBJS)
 		$(CC) -shared -Wl,-soname,libbam.so -o libbam.so.1 $(LOBJS) -lc -lz
+		ln -s libbam.so.1 libbam.so
 
 dylib:
 		@$(MAKE) cleanlocal; \
diff -rupN samtools-0.1.19.orig/padding.c samtools-0.1.19/padding.c
--- samtools-0.1.19.orig/padding.c	2013-03-19 03:48:09.000000000 -0400
+++ samtools-0.1.19/padding.c	2013-08-29 11:35:16.098238862 -0400
@@ -138,7 +138,7 @@ int get_unpadded_len(faidx_t *fai, char
 	return bases;
 }
 
-inline int * update_posmap(int *posmap, kstring_t ref)
+int * update_posmap(int *posmap, kstring_t ref)
 {
 	int i, k;
 	posmap = realloc(posmap, ref.m * sizeof(int));
diff -rupN samtools-0.1.19.orig/sam_view.c samtools-0.1.19/sam_view.c
--- samtools-0.1.19.orig/sam_view.c	2013-03-19 03:48:09.000000000 -0400
+++ samtools-0.1.19/sam_view.c	2013-08-29 09:45:23.066344251 -0400
@@ -135,7 +135,7 @@ int main_samview(int argc, char *argv[])
 
 	/* parse command-line options */
 	strcpy(in_mode, "r"); strcpy(out_mode, "w");
-	while ((c = getopt(argc, argv, "SbBct:h1Ho:q:f:F:ul:r:xX?T:R:L:s:Q:@:m:")) >= 0) {
+	while ((c = getopt(argc, argv, "SbBct:h1Ho:q:f:F:ul:r:xX?T:R:L:s:Q:p:m:")) >= 0) {
 		switch (c) {
 		case 's':
 			if ((g_subsam_seed = strtol(optarg, &q, 10)) != 0) {
@@ -167,7 +167,7 @@ int main_samview(int argc, char *argv[])
 		case 'T': fn_ref = strdup(optarg); is_bamin = 0; break;
 		case 'B': bam_no_B = 1; break;
 		case 'Q': g_qual_scale = atoi(optarg); break;
-		case '@': n_threads = strtol(optarg, 0, 0); break;
+		case 'p': n_threads = strtol(optarg, 0, 0); break;
 		default: return usage(is_long_help);
 		}
 	}
@@ -306,7 +306,7 @@ static int usage(int is_long_help)
 	fprintf(stderr, "         -X       output FLAG in string (samtools-C specific)\n");
 	fprintf(stderr, "         -c       print only the count of matching records\n");
 	fprintf(stderr, "         -B       collapse the backward CIGAR operation\n");
-	fprintf(stderr, "         -@ INT   number of BAM compression threads [0]\n");
+	fprintf(stderr, "         -p INT   number of BAM compression threads [0]\n");
 	fprintf(stderr, "         -L FILE  output alignments overlapping the input BED FILE [null]\n");
 	fprintf(stderr, "         -t FILE  list of reference names and lengths (force -S) [null]\n");
 	fprintf(stderr, "         -T FILE  reference sequence file (force -S) [null]\n");
