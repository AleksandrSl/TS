Index: bam.h
===================================================================
--- bam.h	(revision 1011)
+++ bam.h	(working copy)
@@ -549,6 +549,7 @@
 	bam_mplp_t bam_mplp_init(int n, bam_plp_auto_f func, void **data);
 	void bam_mplp_destroy(bam_mplp_t iter);
 	void bam_mplp_set_maxcnt(bam_mplp_t iter, int maxcnt);
+	void bam_mplp_set_mask(bam_mplp_t iter, int mask);
 	int bam_mplp_auto(bam_mplp_t iter, int *_tid, int *_pos, int *n_plp, const bam_pileup1_t **plp);
 
 	/*! @typedef
Index: bam_pileup.c
===================================================================
--- bam_pileup.c	(revision 1011)
+++ bam_pileup.c	(working copy)
@@ -404,6 +404,13 @@
 		iter->iter[i]->maxcnt = maxcnt;
 }
 
+void bam_mplp_set_mask(bam_mplp_t iter, int mask)
+{
+        int i;
+        for (i = 0; i < iter->n; ++i)
+            iter->iter[i]->flag_mask = mask;
+}
+
 void bam_mplp_destroy(bam_mplp_t iter)
 {
 	int i;
Index: bam2depth.c
===================================================================
--- bam2depth.c	(revision 1011)
+++ bam2depth.c	(working copy)
@@ -14,6 +14,8 @@
 	bamFile fp;      // the file handler
 	bam_iter_t iter; // NULL if a region not specified
 	int min_mapQ, min_len; // mapQ filter; length filter
+	int flag_on;
+	int flag_off;
 } aux_t;
 
 void *bed_read(const char *fn); // read a BED or position list file
@@ -26,7 +28,7 @@
 	aux_t *aux = (aux_t*)data; // data in fact is a pointer to an auxiliary structure
 	int ret = aux->iter? bam_iter_read(aux->fp, aux->iter, b) : bam_read1(aux->fp, b);
 	if (!(b->core.flag&BAM_FUNMAP)) {
-		if ((int)b->core.qual < aux->min_mapQ) b->core.flag |= BAM_FUNMAP;
+		if (((int)b->core.qual < aux->min_mapQ) || ((b->core.flag & aux->flag_on) != aux->flag_on) || (b->core.flag & aux->flag_off)) b->core.flag |= BAM_FUNMAP;
 		else if (aux->min_len && bam_cigar2qlen(&b->core, bam1_cigar(b)) < aux->min_len) b->core.flag |= BAM_FUNMAP;
 	}
 	return ret;
@@ -38,7 +40,7 @@
 int main_depth(int argc, char *argv[])
 #endif
 {
-	int i, n, tid, beg, end, pos, *n_plp, baseQ = 0, mapQ = 0, min_len = 0;
+	int i, n, tid, beg, end, pos, mask, *n_plp, baseQ = 0, mapQ = 0, min_len = 0, flag_on = 0, flag_off = 1796, max_depth = -1;
 	const bam_pileup1_t **plp;
 	char *reg = 0; // specified region
 	void *bed = 0; // BED data structure
@@ -47,17 +49,27 @@
 	bam_mplp_t mplp;
 
 	// parse the command line
-	while ((n = getopt(argc, argv, "r:b:q:Q:l:")) >= 0) {
+	while ((n = getopt(argc, argv, "r:b:q:Q:l:f:F:m:")) >= 0) {
 		switch (n) {
 			case 'l': min_len = atoi(optarg); break; // minimum query length
 			case 'r': reg = strdup(optarg); break;   // parsing a region requires a BAM header
 			case 'b': bed = bed_read(optarg); break; // BED or position list file can be parsed now
 			case 'q': baseQ = atoi(optarg); break;   // base quality threshold
 			case 'Q': mapQ = atoi(optarg); break;    // mapping quality threshold
+			case 'f': flag_on = strtol(optarg,0,0); break;   // flag to include reads in calculating depth
+			case 'F': flag_off = strtol(optarg,0,0); break;   // flag to exclude reads in calculating depth
+			case 'm': max_depth = atoi(optarg); break;  // max depth
 		}
 	}
 	if (optind == argc) {
-		fprintf(stderr, "Usage: bam2depth [-r reg] [-q baseQthres] [-Q mapQthres] [-l minQLen] [-b in.bed] <in1.bam> [...]\n");
+		fprintf(stderr, "Usage: bam2depth [-r reg] [-q baseQthres] [-Q mapQthres] [-l minQLen] [-b in.bed] [-f include flag] [-F exclude flag] [-m max depth] <in1.bam> [...]\n");
+		fprintf(stderr, "Notes:\n\
+\n\
+By default the depth command excludes reads that are duplicates, failed platform QC, secondary mapping and unmapped reads\n\
+This can be reset using the -F flag. The -f and -F flags can be used to include/exclude reads as necessary. e.g. depth -f 0x10 in.bam\n\
+will generate coverage on the reverse strand. The default maximum coverage depth is set to max int (2,147,483,647). This can be changed using the\n\
+-m flag. The default setting using mpileup is 8000. \n\
+\n");
 		return 1;
 	}
 
@@ -68,8 +80,10 @@
 	for (i = 0; i < n; ++i) {
 		bam_header_t *htmp;
 		data[i] = calloc(1, sizeof(aux_t));
-		data[i]->fp = bam_open(argv[optind+i], "r"); // open BAM
+		data[i]->fp = strcmp(argv[optind+i],"-") == 0? bam_dopen(fileno(stdin),"r") :bam_open(argv[optind+i], "r"); // open BAM
 		data[i]->min_mapQ = mapQ;                    // set the mapQ filter
+		data[i]->flag_on = flag_on;                    // set the reads to include
+		data[i]->flag_off = flag_off;                    // set the reads to exclude
 		data[i]->min_len  = min_len;                 // set the qlen filter
 		htmp = bam_header_read(data[i]->fp);         // read the BAM header
 		if (i == 0) {
@@ -85,6 +99,10 @@
 
 	// the core multi-pileup loop
 	mplp = bam_mplp_init(n, read_bam, (void**)data); // initialization
+	if (0 < max_depth) bam_mplp_set_maxcnt(mplp,max_depth); // set maximum depth
+	else bam_mplp_set_maxcnt(mplp,2147483647); // set maxdepth to max int
+	mask = flag_off; // Default mask = (BAM_FUNMAP|BAM_FSECONDARY|BAM_FQCFAIL|BAM_FDUP)
+	bam_mplp_set_mask(mplp,mask);
 	n_plp = calloc(n, sizeof(int)); // n_plp[i] is the number of covering reads from the i-th BAM
 	plp = calloc(n, sizeof(void*)); // plp[i] points to the array of covering reads (internal in mplp)
 	while (bam_mplp_auto(mplp, &tid, &pos, n_plp, plp) > 0) { // come to the next covered position
Index: Makefile
===================================================================
--- Makefile (revision 1011)
+++ Makefile (working copy)
@@ -77,6 +77,7 @@
 
 libbam.so.1-local:$(LOBJS)
 		$(CC) -shared -Wl,-soname,libbam.so -o libbam.so.1 $(LOBJS) -lc -lz
+		ln -s libbam.so.1 libbam.so
 
 dylib:
 		@$(MAKE) cleanlocal; \
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	2012-09-25 15:46:43.885322798 -0400
+++ CMakeLists.txt	2012-09-25 15:23:04.715843791 -0400
@@ -0,0 +1,117 @@
+cmake_minimum_required (VERSION 2.6)
+project (samtools) 
+
+OPTION(BUILD_SHARED_LIBS "Build package with shared libraries." ON)
+
+add_definitions(-D_FILE_OFFSET_BITS=64 -D_USE_KNETFILE -DMD5SUM_MAIN -D_CURSES_LIB=1  -DBGZF_CACHE )
+
+add_library (bam
+ bgzf.c
+ kstring.c
+ bam_aux.c
+ bam.c
+ bam_import.c
+ sam.c
+ bam_index.c
+ bam_pileup.c
+ bam_lpileup.c
+ bam_md.c
+ razf.c
+ faidx.c
+ bedidx.c
+ knetfile.c
+ bam_sort.c
+ sam_header.c
+ bam_reheader.c
+ kprobaln.c
+ bam_cat.c) 
+
+add_executable (samtools
+ bam_tview.c
+ bam_plcmd.c
+ sam_view.c
+ bam_rmdup.c
+ bam_rmdupse.c
+ bam_mate.c
+ bam_stat.c
+ bam_color.c
+ bamtk.c
+ kaln.c
+ bam2bcf.c
+ bam2bcf_indel.c
+ errmod.c
+ sample.c
+ cut_target.c
+ phase.c
+ bam2depth.c
+ padding.c
+ bedcov.c
+ bamshuf.c
+)
+
+target_link_libraries (samtools curses bam m z bcf pthread)
+
+
+include_directories("./")
+
+add_library(bcf
+ bcftools/bcf.c
+ bcftools/vcf.c
+ bcftools/bcfutils.c
+ bcftools/prob1.c
+ bcftools/em.c
+ bcftools/kfunc.c
+ bcftools/kmin.c
+ bcftools/index.c
+ bcftools/fet.c
+ bcftools/mut.c
+ bcftools/bcf2qcall.c)
+
+
+add_executable(bcftools
+ bcftools/call1.c
+ bcftools/main.c
+ kstring.c
+ bgzf.c
+ knetfile.c
+ bedidx.c)
+
+target_link_libraries (bcftools bcf m z pthread)
+
+add_executable(md5sum-lite misc/md5.c misc/md5.h)
+set_target_properties(md5sum-lite PROPERTIES
+     COMPILE_FLAGS -DMD5SUM_MAIN)
+
+
+#add_executable(md5fa misc/md5fa.c misc/md5.h kseq.h)
+#target_link_libraries (md5fa z)
+
+
+add_executable(wgsim misc/wgsim.c kseq.h)
+target_link_libraries (wgsim m z)
+
+
+add_executable(maq2sam-short misc/maq2sam.c)
+target_link_libraries (maq2sam-short z)
+
+
+add_executable(maq2sam-long misc/maq2sam.c)
+target_link_libraries (maq2sam-long z)
+set_target_properties(maq2sam-long PROPERTIES
+     COMPILE_FLAGS -DMAQ_LONGREADS)
+
+
+#add_executable(seqtk misc/seqtk.c khash.h kseq.h)
+#target_link_libraries(seqtk m z)
+
+install(TARGETS samtools bcftools DESTINATION bin)
+install(TARGETS bam bcf DESTINATION lib)
+install(
+ FILES
+  bam.h
+  sam.h
+  khash.h
+  faidx.h
+  bgzf.h
+  sam_header.h
+ DESTINATION include)
